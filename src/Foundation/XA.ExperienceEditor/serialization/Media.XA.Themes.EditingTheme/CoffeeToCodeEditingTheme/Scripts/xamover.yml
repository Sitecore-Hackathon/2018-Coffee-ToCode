---
ID: "85592d46-d560-4fa6-9515-37c3d52e8607"
Parent: "8436240f-ddcf-46b6-9eed-b77f76212ba6"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: /sitecore/media library/Base Themes/CoffeeToCodeEditingTheme/Scripts/xamover
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/62EE9B3CE5134B02B08EC7872A9BA575.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "e34d7476-249d-4eb0-9f52-0f83ea032050"
  Value: dmFyIFNYQTsNCihmdW5jdGlvbiAoU1hBKSB7DQogICAgdmFyIFN4YU1vdmVyID0gKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgZnVuY3Rpb24gU3hhTW92ZXIoc3hhSnF1ZXJ5KSB7DQogICAgICAgICAgICB0aGlzLmFsbG93ZWRSZW5kZXJpbmdzID0gW107DQogICAgICAgICAgICB0aGlzLm5vdGlmeVBsYWNlaG9sZGVyc1Bvc2l0aW9ucyA9IHt9Ow0KICAgICAgICAgICAgdGhpcy5ub3RpZnlCb3hQb3NpdGlvbnMgPSB7fTsNCiAgICAgICAgICAgIHRoaXMuZHJvcHBhYmxlUGxhY2Vob2xkZXJzID0ge307DQogICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVycyA9IHt9Ow0KICAgICAgICAgICAgdGhpcy5kcm9wcGFibGVQbGFjZWhvbGRlcnMgPSBbXTsNCiAgICAgICAgICAgIHRoaXMuaXNUb29sYm94RHJvcCA9IGZhbHNlOw0KICAgICAgICAgICAgdGhpcy5tb3VzZU1hbmFnZXIgPSBuZXcgTW91c2VNYW5hZ2VyKCk7DQogICAgICAgICAgICB0aGlzLmluaXQoKTsNCiAgICAgICAgICAgIHRoaXMuJCA9IHN4YUpxdWVyeTsNCiAgICAgICAgfQ0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuZ2V0T3BlbmVkUGxhY2Vob2xkZXJzQ291bnQgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KICAgICAgICAgICAgdmFyIG9wZW5lZFBsYWNlaG9sZGVycyA9IHRoaXMuJCgnLnNjcG1bY2hyb21ldHlwZT0icGxhY2Vob2xkZXIiXVtraW5kPSJvcGVuIl0nKSwgY291bnQgPSAwOw0KICAgICAgICAgICAgb3BlbmVkUGxhY2Vob2xkZXJzLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbG1lbnQpIHsNCiAgICAgICAgICAgICAgICB2YXIgJG9wZW5Db2RlID0gX3RoaXMuJChlbG1lbnQpLCBrZXkgPSAkb3BlbkNvZGUuYXR0cigna2V5JyksIGNocm9tZUtleSwgY2hyb21lLCBpOw0KICAgICAgICAgICAgICAgIGlmICgkb3BlbkNvZGUuc2libGluZ3MoJy5zY0VtcHR5UGxhY2Vob2xkZXJbc2MtcGxhY2Vob2xkZXItaWQ9IicgKyAkb3BlbkNvZGUuYXR0cigiaWQiKSArICJcIl0iKS5sZW5ndGggIT09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgY291bnQrKzsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX3RoaXMuY2hyb21lcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICBjaHJvbWUgPSBfdGhpcy5jaHJvbWVzW2ldOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hyb21lLl9vcmlnaW5hbERPTUVsZW1lbnQubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lS2V5ID0gY2hyb21lLl9vcmlnaW5hbERPTUVsZW1lbnRbMF0uYXR0cmlidXRlc1sia2V5Il07DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hyb21lS2V5ICE9PSB1bmRlZmluZWQgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWVLZXkgIT09IG51bGwgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWVLZXkudmFsdWUgPT09IGtleSAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5kYXRhICE9PSB1bmRlZmluZWQgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUuZGF0YS5jdXN0b20gIT09IHVuZGVmaW5lZCAmJg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZS5kYXRhLmN1c3RvbS5lZGl0YWJsZSA9PT0gInRydWUiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKzsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgcmV0dXJuIGNvdW50Ow0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIHRoaXMuJCgiLnN4YS10b29sYm94LWRpdi50b29sYm94LWRyb3BwaW5nIikucmVtb3ZlKCk7DQogICAgICAgICAgICB0aGlzLiQoIi5zeGEtdG9vbGJveC1kcm9wcGFibGUiKS5yZW1vdmVDbGFzcygic3hhLXRvb2xib3gtZHJvcHBhYmxlIik7DQogICAgICAgICAgICB0aGlzLiQoIi50b29sYm94LWRyb3BwaW5nIikucmVtb3ZlQ2xhc3MoInRvb2xib3gtZHJvcHBpbmciKTsNCiAgICAgICAgICAgIHRoaXMuJCgiLnpnLWhlaWdodC1maXgiKS5yZW1vdmVDbGFzcygiemctaGVpZ2h0LWZpeCIpOw0KICAgICAgICAgICAgdGhpcy4kKCIuc3hhLWRpc2FibGVkLXBsYWNlaG9sZGVyIikucmVtb3ZlQ2xhc3MoInN4YS1kaXNhYmxlZC1wbGFjZWhvbGRlciIpOw0KICAgICAgICAgICAgdGhpcy4kKCIuemctZGVsaWdodGZ1bC1kcm9wcGFibGUiKS5yZW1vdmUoKTsNCiAgICAgICAgICAgIHRoaXMuJCgiLm5vdGlmeS1ib3giKS5yZW1vdmUoKTsNCiAgICAgICAgICAgIHRoaXMuY3VycmVudENocm9tZSA9IG51bGw7DQogICAgICAgICAgICBTaXRlY29yZS5QYWdlTW9kZXMuQ2hyb21lSGlnaGxpZ2h0TWFuYWdlci5oaWdobGlnaHRDaHJvbWVzKCk7DQogICAgICAgICAgICBTaXRlY29yZS5QYWdlTW9kZXMuQ2hyb21lSGlnaGxpZ2h0TWFuYWdlci5wbGFuVXBkYXRlKCk7DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS5wcmVwYXJlRHJvcHBhYmxlUGxhY2Vob2xkZXJzID0gZnVuY3Rpb24gKHJlbmRlcmluZywgaW52b2tlcikgew0KICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgICAgICAgIHZhciBvcGVuZWRQbGFjZWhvbGRlcnMgPSB0aGlzLiQoIi5zY3BtW2Nocm9tZXR5cGU9XCJwbGFjZWhvbGRlclwiXVtraW5kPVwib3BlblwiXSIpLCBwbGFjZWhvbGRlcnNSZW5kZXJpbmdzID0gdGhpcy5nZXRQbGFjZWhvbGRlcnNSZW5kZXJpbmdzKCksIGlzTW92aW5nQ29tcG9uZW50ID0gcmVuZGVyaW5nLmRhdGEoIm1vdmluZyIpICE9PSB1bmRlZmluZWQsIGNoZWNrID0gcmVuZGVyaW5nLmRhdGEoImdldFBsYWNlaG9sZGVyUG9zaXRpb25DaGFuZ2UiKSB8fCAoZnVuY3Rpb24gKG8sIG0sIGcpIHsgcmV0dXJuICgtMSk7IH0pLCBjb21wb25lbnRQbGFjZWhvbGRlcjsNCiAgICAgICAgICAgIGlmIChyZW5kZXJpbmcuZGF0YSgiY29tcG9uZW50IikgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIGNvbXBvbmVudFBsYWNlaG9sZGVyID0gdGhpcy4kKHJlbmRlcmluZy5kYXRhKCJjb21wb25lbnQiKS50eXBlLmdldFBsYWNlaG9sZGVyKCkub3BlbmluZ01hcmtlcigpKS5hdHRyKCJrZXkiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG9wZW5lZFBsYWNlaG9sZGVycy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgICAgIHZhciBwaCA9IF90aGlzLiQoZWxlbWVudCksIHBsYWNlaG9sZGVyUmVuZGVyaW5ncyA9IHBsYWNlaG9sZGVyc1JlbmRlcmluZ3MuZmlsdGVyKGZ1bmN0aW9uIChwaHIpIHsgcmV0dXJuIChwaHIubmFtZSA9PT0gcGguYXR0cigia2V5IikpOyB9KTsNCiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJzUmVuZGVyaW5ncy5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBkc3RQaCA9IHBoWzBdLmF0dHJpYnV0ZXNbJ2tleSddLnZhbHVlOw0KICAgICAgICAgICAgICAgICAgICB2YXIgc3JjUGggPSBjb21wb25lbnRQbGFjZWhvbGRlcjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHBoVmFsaWRhdG9yID0gbmV3IFNYQS5GZWF0dXJlLkNvbXBvc2l0ZXMuQ29tcG9zaXRlUGxhY2Vob2xkZXJWYWxpZGF0b3IoKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHNyY1BoID09IG51bGwgfHwgcGhWYWxpZGF0b3IudmFsaWRhdGUoZHN0UGgsIHNyY1BoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3JlYXRlUGxhY2Vob2xkZXJzLmNhbGwoX3RoaXMsIHBoLCByZW5kZXJpbmcsIGNvbXBvbmVudFBsYWNlaG9sZGVyLCBjaGVjaywgaXNNb3ZpbmdDb21wb25lbnQsIHBsYWNlaG9sZGVyUmVuZGVyaW5nc1swXSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIGlmICh0eXBlb2YgaW52b2tlciAhPT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsaWNrKCk7DQogICAgICAgICAgICAgICAgaW52b2tlci5kcm9wcGFibGUoew0KICAgICAgICAgICAgICAgICAgICBkcm9wOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc1Rvb2xib3hEcm9wID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdmFyIGRyb3BQbGFjZXMgPSB0aGlzLmdldFBvc3NpYmxlRHJvcFBsYWNlcygpOw0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkcm9wUGxhY2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgdmFyIGVsZW1lbiA9IGRyb3BQbGFjZXNbaV07DQogICAgICAgICAgICAgICAgd2hpbGUgKGVsZW1lbi5hdHRyaWJ1dGVzWydrZXknXSA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIGVsZW1lbiA9IGVsZW1lbi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB2YXIgZHN0UGggPSBlbGVtZW4uYXR0cmlidXRlc1sna2V5J10udmFsdWU7DQogICAgICAgICAgICAgICAgdmFyIHNyY1BoID0gY29tcG9uZW50UGxhY2Vob2xkZXI7DQogICAgICAgICAgICAgICAgdmFyIHBoVmFsaWRhdG9yID0gbmV3IFNYQS5GZWF0dXJlLkNvbXBvc2l0ZXMuQ29tcG9zaXRlUGxhY2Vob2xkZXJWYWxpZGF0b3IoKTsNCiAgICAgICAgICAgICAgICBpZiAoc3JjUGggPT0gbnVsbCB8fCBwaFZhbGlkYXRvci52YWxpZGF0ZShkc3RQaCwgc3JjUGgpKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZURyYXBhYmlsaXR5LmNhbGwodGhpcywgdGhpcy4kKGRyb3BQbGFjZXNbaV0pLCByZW5kZXJpbmcsIGNvbXBvbmVudFBsYWNlaG9sZGVyLCBpc01vdmluZ0NvbXBvbmVudCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdGhpcy4kKCIuc2NFbXB0eVBsYWNlaG9sZGVyLnVpLWRyb3BwYWJsZS5zeGEtdG9vbGJveC1kcm9wcGFibGUiKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbSkgew0KICAgICAgICAgICAgICAgIHZhciAkZWxlbSA9IF90aGlzLiQoZWxlbSk7DQogICAgICAgICAgICAgICAgaWYgKCRlbGVtLnByZXZBbGwoImNvZGUiKS5hdHRyKCJpZCIpID09PSAkZWxlbS5hdHRyKCJzYy1wbGFjZWhvbGRlci1pZCIpKSB7DQogICAgICAgICAgICAgICAgICAgICRlbGVtLmh0bWwoX3RoaXMuJChlbGVtKS5wcmV2QWxsKCJjb2RlIikuYXR0cigia2V5IikpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLkNocm9tZUhpZ2hsaWdodE1hbmFnZXIuaGlnaGxpZ2h0Q2hyb21lcygpOw0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuY2xlYXJEcm9wcGFibGVQbGFjZWhvbGRlcnMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB2YXIgaTsNCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRyb3BwYWJsZVBsYWNlaG9sZGVycy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGlmICghdGhpcy5kcm9wcGFibGVQbGFjZWhvbGRlcnNbaV0uaGFzQ2xhc3MoInRvb2xib3gtZHJvcHBpbmciKSkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3BwYWJsZVBsYWNlaG9sZGVyc1tpXS5yZW1vdmUoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLmRyb3BwYWJsZVBsYWNlaG9sZGVycyA9IFtdOw0KICAgICAgICAgICAgdGhpcy4kKCIuc3hhLXRvb2xib3gtZGl2LnVpLWRyb3BwYWJsZSwuc2NFbXB0eVBsYWNlaG9sZGVyLnN4YS10b29sYm94LWRyb3BwYWJsZSIpLm5vdCgiLnRvb2xib3gtZHJvcHBpbmciKS5yZW1vdmVDbGFzcygic3hhLXRvb2xib3gtZHJvcHBhYmxlIikuaHRtbCgiIik7DQogICAgICAgICAgICB0aGlzLiQoIi56Zy1oZWlnaHQtZml4IikucmVtb3ZlQ2xhc3MoInpnLWhlaWdodC1maXgiKTsNCiAgICAgICAgICAgIHRoaXMuJCgiLnN4YS1kaXNhYmxlZC1wbGFjZWhvbGRlciIpLnJlbW92ZUNsYXNzKCJzeGEtZGlzYWJsZWQtcGxhY2Vob2xkZXIiKTsNCiAgICAgICAgICAgIHRoaXMuJCgiLm5vdGlmeS1ib3giKS5yZW1vdmUoKTsNCiAgICAgICAgICAgIHRoaXMubW91c2VNYW5hZ2VyLnN0b3BUcmFja2luZygpOw0KICAgICAgICAgICAgdGhpcy5ub3RpZnlQbGFjZWhvbGRlcnNQb3NpdGlvbnMgPSB7fTsNCiAgICAgICAgICAgIHRoaXMubm90aWZ5Qm94UG9zaXRpb25zID0ge307DQogICAgICAgICAgICB0aGlzLiQoIi56Zy1kZWxpZ2h0ZnVsLWRyb3BwYWJsZS1pbWFnZSIpLmF0dHIoImxlZnQiLCAiLTIzcHgiKTsNCiAgICAgICAgICAgIFNpdGVjb3JlLlBhZ2VNb2Rlcy5DaHJvbWVIaWdobGlnaHRNYW5hZ2VyLmhpZ2hsaWdodENocm9tZXMoKTsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLnJlZnJlc2hDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdmFyIGksIGosIGNocm9tZSwgY2hyb21lS2V5Ow0KICAgICAgICAgICAgdGhpcy5hbGxvd2VkUmVuZGVyaW5ncyA9IFtdOw0KICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlcnMgPSB7fTsNCiAgICAgICAgICAgIHRoaXMuY2hyb21lcyA9IFNpdGVjb3JlLlBhZ2VNb2Rlcy5DaHJvbWVNYW5hZ2VyLmNocm9tZXMoKTsNCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmNocm9tZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICBjaHJvbWUgPSB0aGlzLmNocm9tZXNbaV07DQogICAgICAgICAgICAgICAgaWYgKGNocm9tZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgY2hyb21lLmRhdGEuY3VzdG9tICE9PSB1bmRlZmluZWQgJiYgY2hyb21lLmRhdGEuY3VzdG9tLmFsbG93ZWRSZW5kZXJpbmdzICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNocm9tZVJlbmRlcmluZ3MgPSBjaHJvbWUuZGF0YS5jdXN0b20uYWxsb3dlZFJlbmRlcmluZ3M7DQogICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjaHJvbWVSZW5kZXJpbmdzLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kLmluQXJyYXkoY2hyb21lUmVuZGVyaW5nc1tqXSwgdGhpcy5hbGxvd2VkUmVuZGVyaW5ncykgPT09IC0xKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxvd2VkUmVuZGVyaW5ncy5wdXNoKGNocm9tZVJlbmRlcmluZ3Nbal0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWUuX29yaWdpbmFsRE9NRWxlbWVudC5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWVLZXkgPSBjaHJvbWUuX29yaWdpbmFsRE9NRWxlbWVudFswXS5hdHRyaWJ1dGVzWyJrZXkiXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWVLZXkgIT09IHVuZGVmaW5lZCAmJiBjaHJvbWVLZXkgIT09IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyc1tjaHJvbWVLZXkudmFsdWVdID0gY2hyb21lUmVuZGVyaW5nczsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmdldEN1cnJlbnRDaHJvbWUgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2hyb21lOw0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuZ2V0QWxsb3dlZFJlbmRlcmluZ3MgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxvd2VkUmVuZGVyaW5nczsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmluaXRNb3ZlQ29tcG9uZW50UGx1Z0luID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBzaXRlY29yZVNvcnRpbmcsIHNjSW5zZXJ0U29ydGluZ0hhbmRsZSwgc3hhSW5zZXJ0U29ydGluZ0hhbmRsZSwgc2NTb3J0aW5nSGFuZGxlcjsNCiAgICAgICAgICAgIGlmICh0eXBlb2YgKFNpdGVjb3JlKSA9PT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzaXRlY29yZVNvcnRpbmcgPSBTaXRlY29yZS5QYWdlTW9kZXMuQ2hyb21lVHlwZXMuUGxhY2Vob2xkZXJTb3J0aW5nLnByb3RvdHlwZTsNCiAgICAgICAgICAgIHNjSW5zZXJ0U29ydGluZ0hhbmRsZSA9IHNpdGVjb3JlU29ydGluZy5pbnNlcnRTb3J0aW5nSGFuZGxlOw0KICAgICAgICAgICAgc3hhSW5zZXJ0U29ydGluZ0hhbmRsZSA9IGZ1bmN0aW9uICh3aGVyZSwgY2hyb21lLCBpbnNlcnRQb3NpdGlvbiwgcG9zaXRpb25Db3VudCkgew0KICAgICAgICAgICAgICAgIHZhciBjbGlja0hhbmRsZXJzLCBsYXN0SGFuZGxlciwgYmluZEV2ZW50Ow0KICAgICAgICAgICAgICAgIHNjU29ydGluZ0hhbmRsZXIgPSB0aGlzOw0KICAgICAgICAgICAgICAgIHNjSW5zZXJ0U29ydGluZ0hhbmRsZS5jYWxsKHNjU29ydGluZ0hhbmRsZXIsIHdoZXJlLCBjaHJvbWUsIGluc2VydFBvc2l0aW9uLCBwb3NpdGlvbkNvdW50KTsNCiAgICAgICAgICAgICAgICBjbGlja0hhbmRsZXJzID0gc2NTb3J0aW5nSGFuZGxlci5oYW5kbGVzLnNwbGljZSgwKTsNCiAgICAgICAgICAgICAgICBsYXN0SGFuZGxlciA9ICRzYyhjbGlja0hhbmRsZXJzW2NsaWNrSGFuZGxlcnMubGVuZ3RoIC0gMV0pOw0KICAgICAgICAgICAgICAgIGxhc3RIYW5kbGVyLnVuYmluZCgiY2xpY2siKTsNCiAgICAgICAgICAgICAgICBiaW5kRXZlbnQgPSBmdW5jdGlvbiAocCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwOyB9KCk7DQogICAgICAgICAgICAgICAgICAgIGxhc3RIYW5kbGVyLmNsaWNrKCRzYy5wcm94eShmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudFRyZWUgPSBzZWxmLmdldENvbXBvbmVudFRyZWUodGhpcy5yZW5kZXJpbmcpLCBjb21wb25lbnQgPSB0aGlzLnJlbmRlcmluZzsNCiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLkRlc2lnbk1hbmFnZXIuc29ydGluZ0VuZCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLkRlc2lnbk1hbmFnZXIubW92ZUNvbnRyb2xUbyhjb21wb25lbnQsIHRoaXMucGxhY2Vob2xkZXIsIHBvc2l0aW9uKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubW92ZUNvbXBvbmVudFRyZWUoY29tcG9uZW50LCBjb21wb25lbnRUcmVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucG9zdE1vdmVBY3Rpb25zKGNvbXBvbmVudCk7DQogICAgICAgICAgICAgICAgICAgIH0sIHNjU29ydGluZ0hhbmRsZXIpKTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIGJpbmRFdmVudChpbnNlcnRQb3NpdGlvbik7DQogICAgICAgICAgICAgICAgc2NTb3J0aW5nSGFuZGxlci5oYW5kbGVzID0gY2xpY2tIYW5kbGVyczsNCiAgICAgICAgICAgIH07DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHNpdGVjb3JlU29ydGluZy5pbnNlcnRTb3J0aW5nSGFuZGxlID0gc3hhSW5zZXJ0U29ydGluZ0hhbmRsZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS5pbml0RGVsZXRlQ29tcG9uZW50UGx1Z0luID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgc2l0ZWNvcmVSZW5kZXJpbmcgPSBTaXRlY29yZS5QYWdlTW9kZXMuQ2hyb21lVHlwZXMuUmVuZGVyaW5nLnByb3RvdHlwZSwgc2l0ZWNvcmVEZWxldGVDb250cm9sID0gc2l0ZWNvcmVSZW5kZXJpbmcuZGVsZXRlQ29udHJvbCwgY3NzQ2xhc3MgPSAiemctY2FzY2FkZS1kZWxldGUiLCBzZXRTdHlsZVZpc2libGUgPSBmdW5jdGlvbiAodmlzaWJsZSwgaHRtbEVsZW1lbnRzKSB7DQogICAgICAgICAgICAgICAgdmFyIHRvU3R5bGUgPSBfdGhpcy4kKGh0bWxFbGVtZW50cykuZmlsdGVyKCIuc2NFbmFibGVkQ2hyb21lIik7DQogICAgICAgICAgICAgICAgaWYgKHZpc2libGUpIHsNCiAgICAgICAgICAgICAgICAgICAgdG9TdHlsZS5hZGRDbGFzcyhjc3NDbGFzcyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB0b1N0eWxlLnJlbW92ZUNsYXNzKGNzc0NsYXNzKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCBkb2VzVXNlckNvbmZpcm1DYXNjYWRlRGVsZXRlID0gZnVuY3Rpb24gKGNvbXBvbmVudFRyZWUpIHsNCiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICJUaGlzIG9wZXJhdGlvbiB3aWxsIGRlbGV0ZSB0aGUgZm9sbG93aW5nIG5lc3RlZCBjb21wb25lbnRzOlxuIiwgY3VycmVudCwgaTsNCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcG9uZW50VHJlZS5iZnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGNvbXBvbmVudFRyZWUuYmZzW2ldOw0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9ICJcdTAwQjcgIiArIGN1cnJlbnQubm9kZS5fZGlzcGxheU5hbWUgKyAiXG4iOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlybShtZXNzYWdlKTsNCiAgICAgICAgICAgIH0sIGRlbGV0ZU5lc3RlZENvbXBvbmVudHMgPSBmdW5jdGlvbiAoY29tcG9uZW50VHJlZSkgew0KICAgICAgICAgICAgICAgIHZhciBjdXJyZW50LCBjb250ZXh0LCBpOw0KICAgICAgICAgICAgICAgIGZvciAoaSA9IGNvbXBvbmVudFRyZWUuYmZzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjb21wb25lbnRUcmVlLmJmc1tpXS5ub2RlOw0KICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gY3VycmVudC50eXBlOw0KICAgICAgICAgICAgICAgICAgICBzaXRlY29yZURlbGV0ZUNvbnRyb2wuY2FsbChjb250ZXh0LCBjdXJyZW50LnR5cGUuY2hyb21lKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCB6Z0RlbGV0ZUNvbnRyb2wgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBjb21wb25lbnQgPSBjb250ZXh0LmNocm9tZSwgaHRtbEVsZW1lbnRzLCBjb21wb25lbnRUcmVlID0gc2VsZi5nZXRDb21wb25lbnRUcmVlKGNvbXBvbmVudCk7DQogICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudFRyZWUuYmZzLmxlbmd0aCAhPT0gMSkgew0KICAgICAgICAgICAgICAgICAgICBodG1sRWxlbWVudHMgPSBjb21wb25lbnRUcmVlLm5vZGUuZWxlbWVudDsNCiAgICAgICAgICAgICAgICAgICAgc2V0U3R5bGVWaXNpYmxlKHRydWUsIGh0bWxFbGVtZW50cyk7DQogICAgICAgICAgICAgICAgICAgIGlmIChkb2VzVXNlckNvbmZpcm1DYXNjYWRlRGVsZXRlKGNvbXBvbmVudFRyZWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVOZXN0ZWRDb21wb25lbnRzKGNvbXBvbmVudFRyZWUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHNldFN0eWxlVmlzaWJsZShmYWxzZSwgaHRtbEVsZW1lbnRzKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHNpdGVjb3JlRGVsZXRlQ29udHJvbC5jYWxsKGNvbnRleHQsIGNvbXBvbmVudCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIGlmICh0eXBlb2YgKFNpdGVjb3JlKSA9PT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHNpdGVjb3JlUmVuZGVyaW5nLmRlbGV0ZUNvbnRyb2wgPSB6Z0RlbGV0ZUNvbnRyb2w7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoZSkgew0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuaW5pdFRvdWNoRHJhZ05Ecm9wUGx1Z0luID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgIWZ1bmN0aW9uIChhKSB7DQogICAgICAgICAgICAgICAgZnVuY3Rpb24gZihhLCBiKSB7DQogICAgICAgICAgICAgICAgICAgIGlmICghKGEub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA+IDEpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBhLnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGEub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXSwgZCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCJNb3VzZUV2ZW50cyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZC5pbml0TW91c2VFdmVudChiLCAhMCwgITAsIHdpbmRvdywgMSwgYy5zY3JlZW5YLCBjLnNjcmVlblksIGMuY2xpZW50WCwgYy5jbGllbnRZLCAhMSwgITEsICExLCAhMSwgMCwgbnVsbCksIGEudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGEuc3VwcG9ydC50b3VjaCA9ICJvbnRvdWNoZW5kIiBpbiBkb2N1bWVudCwgYS5zdXBwb3J0LnRvdWNoKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBlLCBiID0gYS51aS5tb3VzZS5wcm90b3R5cGUsIGMgPSBiLl9tb3VzZUluaXQsIGQgPSBiLl9tb3VzZURlc3Ryb3k7DQogICAgICAgICAgICAgICAgICAgIGIuX3RvdWNoU3RhcnQgPSBmdW5jdGlvbiAoYSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzOw0KICAgICAgICAgICAgICAgICAgICAgICAgIWUgJiYgYi5fbW91c2VDYXB0dXJlKGEub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXSkgJiYgKGUgPSAhMCwgYi5fdG91Y2hNb3ZlZCA9ICExLCBmKGEsICJtb3VzZW92ZXIiKSwgZihhLCAibW91c2Vtb3ZlIiksIGYoYSwgIm1vdXNlZG93biIpKTsNCiAgICAgICAgICAgICAgICAgICAgfSwgYi5fdG91Y2hNb3ZlID0gZnVuY3Rpb24gKGEpIHsgZSAmJiAodGhpcy5fdG91Y2hNb3ZlZCA9ICEwLCBmKGEsICJtb3VzZW1vdmUiKSk7IH0sIGIuX3RvdWNoRW5kID0gZnVuY3Rpb24gKGEpIHsgZSAmJiAoZihhLCAibW91c2V1cCIpLCBmKGEsICJtb3VzZW91dCIpLCB0aGlzLl90b3VjaE1vdmVkIHx8IGYoYSwgImNsaWNrIiksIGUgPSAhMSk7IH0sIGIuX21vdXNlSW5pdCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gdGhpczsNCiAgICAgICAgICAgICAgICAgICAgICAgIGIuZWxlbWVudC5iaW5kKHsgdG91Y2hzdGFydDogYS5wcm94eShiLCAiX3RvdWNoU3RhcnQiKSwgdG91Y2htb3ZlOiBhLnByb3h5KGIsICJfdG91Y2hNb3ZlIiksIHRvdWNoZW5kOiBhLnByb3h5KGIsICJfdG91Y2hFbmQiKSB9KSwgYy5jYWxsKGIpOw0KICAgICAgICAgICAgICAgICAgICB9LCBiLl9tb3VzZURlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHRoaXM7DQogICAgICAgICAgICAgICAgICAgICAgICBiLmVsZW1lbnQudW5iaW5kKHsgdG91Y2hzdGFydDogYS5wcm94eShiLCAiX3RvdWNoU3RhcnQiKSwgdG91Y2htb3ZlOiBhLnByb3h5KGIsICJfdG91Y2hNb3ZlIiksIHRvdWNoZW5kOiBhLnByb3h5KGIsICJfdG91Y2hFbmQiKSB9KSwgZC5jYWxsKGIpOw0KICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0odGhpcy4kKTsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KICAgICAgICAgICAgaWYgKHR5cGVvZiAoU2l0ZWNvcmUpID09PSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFNpdGVjb3JlLlBhZ2VNb2Rlcy5DaHJvbWVNYW5hZ2VyLmNocm9tZXNSZXNldGVkLm9ic2VydmUoJHNjLnByb3h5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7DQogICAgICAgICAgICB9KSk7DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS5nZXRQb3NzaWJsZURyb3BQbGFjZXMgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KICAgICAgICAgICAgdmFyIGRyb3BQbGFjZXMgPSB0aGlzLiQoIi5zeGEtdG9vbGJveC1kaXYsLnNjRW1wdHlQbGFjZWhvbGRlciIpLm5vdCgiLnVpLWRyb3BwYWJsZSIpLnRvQXJyYXkoKTsNCiAgICAgICAgICAgIGRyb3BQbGFjZXMuc29ydChmdW5jdGlvbiAoZmlyc3QsIHNlY29uZCkgew0KICAgICAgICAgICAgICAgIHZhciBmaXJzdEtleSA9IF90aGlzLiQoZmlyc3QpLmZpbmQoIi56Zy1kZWxpZ2h0ZnVsLWRyb3BwYWJsZSIpLmF0dHIoImtleSIpLCBzZWNvbmRLZXkgPSBfdGhpcy4kKHNlY29uZCkuZmluZCgiLnpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlIikuYXR0cigia2V5Iik7DQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaXJzdEtleSA9PT0gInVuZGVmaW5lZCIpIHsNCiAgICAgICAgICAgICAgICAgICAgZmlyc3RLZXkgPSBfdGhpcy4kKGZpcnN0KS5wcmV2QWxsKCJjb2RlIikuYXR0cigia2V5Iik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2Vjb25kS2V5ID09PSAidW5kZWZpbmVkIikgew0KICAgICAgICAgICAgICAgICAgICBzZWNvbmRLZXkgPSBfdGhpcy4kKHNlY29uZCkucHJldkFsbCgiY29kZSIpLmF0dHIoImtleSIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY291bnRTbGFzaGVzKGZpcnN0S2V5KSAtIF90aGlzLmNvdW50U2xhc2hlcyhzZWNvbmRLZXkpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICByZXR1cm4gZHJvcFBsYWNlczsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmNvdW50U2xhc2hlcyA9IGZ1bmN0aW9uIChwaCkgew0KICAgICAgICAgICAgcmV0dXJuIChwaC5tYXRjaCgvXC8vZykgfHwgW10pLmxlbmd0aDsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmNyZWF0ZVBsYWNlaG9sZGVySHRtbEVsZW1lbnQgPSBmdW5jdGlvbiAocGxhY2Vob2xkZXIsIHBsaElkLCBkaXNhYmxlZCkgew0KICAgICAgICAgICAgaWYgKGRpc2FibGVkID09PSB2b2lkIDApIHsgZGlzYWJsZWQgPSB0cnVlOyB9DQogICAgICAgICAgICB2YXIgZHJvcFBsYWNlID0gdGhpcy4kKCI8ZGl2IGNsYXNzPVwiemctZGVsaWdodGZ1bC1kcm9wcGFibGVcIiBrZXk9XCIiICsgcGxoSWQgKyAiXCIgc3R5bGU9XCJ3aWR0aDogIiArIHBsYWNlaG9sZGVyLmNzcygid2lkdGgiKSArICI7IHZpc2liaWxpdHk6IGhpZGRlblwiPiIgKw0KICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPVwiaW5uZXJcIj48L2Rpdj4iICsNCiAgICAgICAgICAgICAgICAiPC9kaXY+Iik7DQogICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHsNCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5hcHBlbmQoZHJvcFBsYWNlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmFkZENsYXNzKCJzeGEtdG9vbGJveC1kcm9wcGFibGUiKTsNCiAgICAgICAgICAgIGlmICghcGxhY2Vob2xkZXIuaGFzQ2xhc3MoInN4YS10b29sYm94LWRpdiIpKSB7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuY3NzKCJ3aWR0aCIsIHBsYWNlaG9sZGVyLnBhcmVudCgpLmNzcygid2lkdGgiKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIuaGFzQ2xhc3MoInNjRW1wdHlQbGFjZWhvbGRlciIpKSB7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIucGFyZW50KCkuYWRkQ2xhc3MoInpnLWhlaWdodC1maXgiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghZGlzYWJsZWQpIHsNCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5wYXJlbnQoKS5hZGRDbGFzcygic3hhLWRpc2FibGVkLXBsYWNlaG9sZGVyIik7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS5pbml0aWFsaXplRHJhcGFiaWxpdHkgPSBmdW5jdGlvbiAocGxhY2Vob2xkZXIsIHJlbmRlcmluZywgY29tcG9uZW50UGxhY2Vob2xkZXIsIGlzTW92aW5nQ29tcG9uZW50KSB7DQogICAgICAgICAgICB2YXIgcGxoSWQgPSBwbGFjZWhvbGRlci5hdHRyKCJzYy1wbGFjZWhvbGRlci1pZCIpLCBzZWxmID0gdGhpczsNCiAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlci5wcmV2QWxsKCJjb2RlIikuYXR0cigiaWQiKSA9PT0gcGxoSWQpIHsNCiAgICAgICAgICAgICAgICBwbGhJZCA9IHBsYWNlaG9sZGVyLnByZXZBbGwoImNvZGUiKS5hdHRyKCJrZXkiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChpc01vdmluZ0NvbXBvbmVudCAmJiByZW5kZXJpbmcuZGF0YSgiaXNQbGFjZWhvbGRlck5lc3RlZEluc2lkZUNvbXBvbmVudCIpKGNvbXBvbmVudFBsYWNlaG9sZGVyLCBwbGhJZCwgcmVuZGVyaW5nKSkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh0aGlzLiQuaW5BcnJheShyZW5kZXJpbmcuZGF0YSgiaWQiKSwgdGhpcy5wbGFjZWhvbGRlcnNbcGxoSWRdKSAhPT0gLTEpIHsNCiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIuY2hpbGRyZW4oIi56Zy1kZWxpZ2h0ZnVsLWRyb3BwYWJsZSIpLmxlbmd0aCA9PT0gMCkgew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVBsYWNlaG9sZGVySHRtbEVsZW1lbnQocGxhY2Vob2xkZXIsIHBsaElkKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuZmluZCgiLnpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlLCAuemctZGVsaWdodGZ1bC1kcm9wcGFibGUtaW1hZ2UiKS5ub3QoIi5pbm5lciIpLmRyb3BwYWJsZSh7DQogICAgICAgICAgICAgICAgICAgIHRvbGVyYW5jZTogInBvaW50ZXIiLA0KICAgICAgICAgICAgICAgICAgICBvdXQ6IGZ1bmN0aW9uIChldmVudCwgdWkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLiQodGhpcykuaGFzQ2xhc3MoInpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlLWltYWdlIikgfHwgc2VsZi4kKHRoaXMpLnBhcmVudCgpLmhhc0NsYXNzKCJzY0VtcHR5UGxhY2Vob2xkZXIiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5RHJvcFBsYWNlLmNhbGwoc2VsZiwgdHJ1ZSwgc2VsZi4kKHRoaXMpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgb3ZlcjogZnVuY3Rpb24gKGV2ZW50LCB1aSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLiQoX3RoaXMpLmhhc0NsYXNzKCJ6Zy1kZWxpZ2h0ZnVsLWRyb3BwYWJsZS1pbWFnZSIpIHx8IHNlbGYuJChfdGhpcykucGFyZW50KCkuaGFzQ2xhc3MoInNjRW1wdHlQbGFjZWhvbGRlciIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZ5RHJvcFBsYWNlLmNhbGwoc2VsZiwgZmFsc2UsIHNlbGYuJChfdGhpcykpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwKTsNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgZHJvcDogZnVuY3Rpb24gKGV2ZW50LCB1aSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGFjZWhvbGRlckRyb3AocmVuZGVyaW5nLCBwbGhJZCwgdWksIHNlbGYuJCh0aGlzKS5wYXJlbnQoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZUltYWdlTW91c2VNb3Zlcy5jYWxsKHNlbGYsIHBsYWNlaG9sZGVyKTsNCiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZUVtcHR5UGxhY2Vob2xkZXJzKHBsYWNlaG9sZGVyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUGxhY2Vob2xkZXJIdG1sRWxlbWVudChwbGFjZWhvbGRlciwgcGxoSWQsIGZhbHNlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmhhbmRsZUltYWdlTW91c2VNb3ZlcyA9IGZ1bmN0aW9uIChwbGFjZWhvbGRlcikgew0KICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOw0KICAgICAgICAgICAgcGxhY2Vob2xkZXIuZmluZCgiLnpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlLWltYWdlIikubW91c2VvdmVyKGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgICAgIHZhciAkY3VycmVudEVsZW1lbnQgPSBzZWxmLiQoZXZlbnQuY3VycmVudFRhcmdldCk7DQogICAgICAgICAgICAgICAgaWYgKCRjdXJyZW50RWxlbWVudC5hdHRyKCJwb3NpdGlvbiIpKSB7DQogICAgICAgICAgICAgICAgICAgIHNlbGYuJCgiLnpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlW2tleT0nIiArICRjdXJyZW50RWxlbWVudC5hdHRyKCJrZXkiKSArICInXVtwb3NpdGlvbj0iICsgJGN1cnJlbnRFbGVtZW50LmF0dHIoInBvc2l0aW9uIikgKyAiXSIpLmFkZENsYXNzKCJob3ZlcmVkIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBzZWxmLiQoIi56Zy1kZWxpZ2h0ZnVsLWRyb3BwYWJsZVtrZXk9JyIgKyAkY3VycmVudEVsZW1lbnQuYXR0cigia2V5IikgKyAiJ10iKS5hZGRDbGFzcygiaG92ZXJlZCIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkY3VycmVudEVsZW1lbnQuYWRkQ2xhc3MoImhvdmVyZWQtaWNvbiIpOw0KICAgICAgICAgICAgfSkubW91c2VvdXQoZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgdmFyICRjdXJyZW50RWxlbWVudCA9IHNlbGYuJChldmVudC5jdXJyZW50VGFyZ2V0KTsNCiAgICAgICAgICAgICAgICBpZiAoJGN1cnJlbnRFbGVtZW50LmF0dHIoInBvc2l0aW9uIikpIHsNCiAgICAgICAgICAgICAgICAgICAgc2VsZi4kKCIuemctZGVsaWdodGZ1bC1kcm9wcGFibGVba2V5PSciICsgJGN1cnJlbnRFbGVtZW50LmF0dHIoImtleSIpICsgIiddW3Bvc2l0aW9uPSIgKyAkY3VycmVudEVsZW1lbnQuYXR0cigicG9zaXRpb24iKSArICJdIikucmVtb3ZlQ2xhc3MoImhvdmVyZWQiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHNlbGYuJCgiLnpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlW2tleT0nIiArICRjdXJyZW50RWxlbWVudC5hdHRyKCJrZXkiKSArICInXSIpLnJlbW92ZUNsYXNzKCJob3ZlcmVkIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRjdXJyZW50RWxlbWVudC5yZW1vdmVDbGFzcygiaG92ZXJlZC1pY29uIik7DQogICAgICAgICAgICAgICAgJGN1cnJlbnRFbGVtZW50LmNoaWxkcmVuKCkucmVtb3ZlKCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmhhbmRsZUVtcHR5UGxhY2Vob2xkZXJzID0gZnVuY3Rpb24gKHBsYWNlaG9sZGVyKSB7DQogICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7DQogICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIuaGFzQ2xhc3MoInNjRW1wdHlQbGFjZWhvbGRlciIpKSB7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIubW91c2VvdmVyKGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgICAgICAgICBzZWxmLiQoZXZlbnQuY3VycmVudFRhcmdldCkuZmluZCgiLnpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlIikuYWRkQ2xhc3MoImhvdmVyZWQiKS5jc3MoInZpc2liaWxpdHkiLCAidmlzaWJsZSIpOw0KICAgICAgICAgICAgICAgIH0pLm1vdXNlb3V0KGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJ0b29sYm94LWRyb3BwaW5nIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJChldmVudC5jdXJyZW50VGFyZ2V0KS5maW5kKCIuemctZGVsaWdodGZ1bC1kcm9wcGFibGUiKS5jc3MoInZpc2liaWxpdHkiLCAiaGlkZGVuIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLnBsYWNlaG9sZGVyRHJvcCA9IGZ1bmN0aW9uIChyZW5kZXJpbmcsIHBsaElkLCB1aSwgcGxhY2Vob2xkZXIpIHsNCiAgICAgICAgICAgIGlmIChyZW5kZXJpbmcuZGF0YSgibW92aW5nIikgIT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vdmVDb21wb25lbnQocGxoSWQsIHJlbmRlcmluZywgcGxhY2Vob2xkZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcENvbXBvbmVudCh1aSwgcGxhY2Vob2xkZXIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuY3JlYXRlUGxhY2Vob2xkZXJzID0gZnVuY3Rpb24gKCRvcGVuQ29kZSwgcmVuZGVyaW5nLCBjb21wb25lbnRQbGFjZWhvbGRlciwgY2hlY2ssIGlzTW92aW5nQ29tcG9uZW50LCBwbGFjZWhvbGRlckRhdGEpIHsNCiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQogICAgICAgICAgICB2YXIga2V5ID0gJG9wZW5Db2RlLmF0dHIoImtleSIpLCBvcGVuZWQgPSBmYWxzZSwgJHNpYmxpbmcgPSBudWxsLCBrLCBwb3NpdGlvbiA9IDAsIHJlbmRlcmluZ3MsIGFsbFNpYmxpbmdzLCBhbGxSZW5kZXJpbmdzLCBwb3NpdGlvbkNoYW5nZTsNCiAgICAgICAgICAgIGlmICghdGhpcy5zaG91bGRDcmVhdGVQbGFjZWhvbGRlcihyZW5kZXJpbmcsICRvcGVuQ29kZSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBhbGxTaWJsaW5ncyA9ICRvcGVuQ29kZS5uZXh0QWxsKCI6bm90KFtjaHJvbWV0eXBlPSdmaWVsZCddKSIpOw0KICAgICAgICAgICAgYWxsUmVuZGVyaW5ncyA9ICRvcGVuQ29kZS5zaWJsaW5ncygiZGl2LmNvbXBvbmVudCxkaXYuanNvbi1jb21wb25lbnQtd3JhcHBlciIpOw0KICAgICAgICAgICAgaWYgKGlzTW92aW5nQ29tcG9uZW50ICYmIHJlbmRlcmluZy5kYXRhKCJpc1BsYWNlaG9sZGVyTmVzdGVkSW5zaWRlQ29tcG9uZW50IikoY29tcG9uZW50UGxhY2Vob2xkZXIsIGtleSwgcmVuZGVyaW5nKSkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChhbGxSZW5kZXJpbmdzLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICByZW5kZXJpbmdzID0gcGxhY2Vob2xkZXJEYXRhLnJlbmRlcmluZ3M7DQogICAgICAgICAgICAgICAgaWYgKHJlbmRlcmluZ3MubGVuZ3RoIDw9IDEgJiYgaXNNb3ZpbmdDb21wb25lbnQgJiYgY29tcG9uZW50UGxhY2Vob2xkZXIgPT09IHBsYWNlaG9sZGVyRGF0YS5uYW1lKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHJlbmRlcmluZ3MubGVuZ3RoOyBrKyspIHsNCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25DaGFuZ2UgPSBjaGVjayhyZW5kZXJpbmcsIGssIGFsbFNpYmxpbmdzKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVEcm9wcGFibGVHcmlkUGxhY2Vob2xkZXIodGhpcy4kKHJlbmRlcmluZ3Nba10pLCB0cnVlLCBwb3NpdGlvbiwgcGxhY2Vob2xkZXJEYXRhLm5hbWUpOw0KICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbisrOw0KICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gcmVuZGVyaW5ncy5sZW5ndGggLSAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZURyb3BwYWJsZUdyaWRQbGFjZWhvbGRlcih0aGlzLiQocmVuZGVyaW5nc1trXSksIGZhbHNlLCBwb3NpdGlvbiwgcGxhY2Vob2xkZXJEYXRhLm5hbWUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGFsbFNpYmxpbmdzLmxlbmd0aDsgaysrKSB7DQogICAgICAgICAgICAgICAgICAgICRzaWJsaW5nID0gdGhpcy4kKGFsbFNpYmxpbmdzW2tdKTsNCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25DaGFuZ2UgPSBjaGVjayhyZW5kZXJpbmcsIGssIGFsbFNpYmxpbmdzKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTW92aW5nQ29tcG9uZW50ICYmIHBvc2l0aW9uQ2hhbmdlID49IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHBvc2l0aW9uQ2hhbmdlOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKCRzaWJsaW5nLnByb3AoInRhZ05hbWUiKSAhPT0gIkNPREUiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmVkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZURyb3BwYWJsZVBsYWNlaG9sZGVyKCRzaWJsaW5nLCB0cnVlLCBwb3NpdGlvbiwga2V5KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uKys7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNpYmxpbmcuYXR0cigia2luZCIpID09PSAib3BlbiIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRHJvcHBhYmxlUGxhY2Vob2xkZXIoJHNpYmxpbmcsIHRydWUsIHBvc2l0aW9uLCBrZXkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uKys7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNpYmxpbmcuYXR0cigia2luZCIpID09PSAiY2xvc2UiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzaWJsaW5nLmF0dHIoImtleSIpICE9PSBrZXkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVkID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdmFyIGNvbmRpdGlvbiA9IGFsbFNpYmxpbmdzLmZpbHRlcihmdW5jdGlvbiAoaWR4LCBlKSB7IHJldHVybiAoX3RoaXMuJChlKS5hdHRyKCJraW5kIikgPT09ICJvcGVuIik7IH0pLmxlbmd0aDsNCiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPiAwICYmIGNvbmRpdGlvbiAhPT0gcG9zaXRpb24gLSAxKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRHJvcHBhYmxlUGxhY2Vob2xkZXIoJHNpYmxpbmcsIGZhbHNlLCBwb3NpdGlvbiwga2V5KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS5jcmVhdGVEcm9wcGFibGVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uICgkc2libGluZywgYmVmb3JlLCBwb3NpdGlvbiwgcGxhY2Vob2xkZXJLZXkpIHsNCiAgICAgICAgICAgIHZhciAkZGl2ID0gdGhpcy4kKCI8ZGl2IGNsYXNzPVwic3hhLXRvb2xib3gtZGl2XCIgc2MtcGxhY2Vob2xkZXItaWQ9XCIiICsgcGxhY2Vob2xkZXJLZXkgKyAiXCIgcG9zaXRpb249XCIiICsgcG9zaXRpb24gKyAiXCIgPiIgKw0KICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSd6Zy1kZWxpZ2h0ZnVsLWRyb3BwYWJsZS1pbWFnZScgcG9zaXRpb249XCIiICsgcG9zaXRpb24gKyAiXCIga2V5PVwiIiArIHBsYWNlaG9sZGVyS2V5ICsgIlwiPjwvZGl2PiIgKw0KICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPVwiemctZGVsaWdodGZ1bC1kcm9wcGFibGVcIiBwb3NpdGlvbj1cIiIgKyBwb3NpdGlvbiArICJcIiBrZXk9XCIiICsgcGxhY2Vob2xkZXJLZXkgKyAiXCI+PGRpdiBjbGFzcz1cImlubmVyXCI+PC9kaXY+PC9kaXY+IiArDQogICAgICAgICAgICAgICAgIjwvZGl2PiIpOw0KICAgICAgICAgICAgJGRpdi53aWR0aCgkc2libGluZy5wYXJlbnQoKS53aWR0aCgpKTsNCiAgICAgICAgICAgIHRoaXMuZHJvcFBsYWNlaG9sZGVyKGJlZm9yZSwgJGRpdiwgJHNpYmxpbmcpOw0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuY3JlYXRlRHJvcHBhYmxlR3JpZFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKCRzaWJsaW5nLCBiZWZvcmUsIHBvc2l0aW9uLCBwbGFjZWhvbGRlcktleSkgew0KICAgICAgICAgICAgdmFyICRkaXYgPSB0aGlzLiQoIjxkaXYgY2xhc3M9XCJzeGEtdG9vbGJveC1kaXZcIiBzYy1wbGFjZWhvbGRlci1pZD1cIiIgKyBwbGFjZWhvbGRlcktleSArICJcIiBwb3NpdGlvbj1cIiIgKyBwb3NpdGlvbiArICJcIiA+IiArDQogICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9J3pnLWRlbGlnaHRmdWwtZHJvcHBhYmxlLWltYWdlJyBwb3NpdGlvbj1cIiIgKyBwb3NpdGlvbiArICJcIiBrZXk9XCIiICsgcGxhY2Vob2xkZXJLZXkgKyAiXCI+PC9kaXY+IiArDQogICAgICAgICAgICAgICAgIjxkaXYgY2xhc3M9XCJ6Zy1kZWxpZ2h0ZnVsLWRyb3BwYWJsZVwiIHBvc2l0aW9uPVwiIiArIHBvc2l0aW9uICsgIlwiIGtleT1cIiIgKyBwbGFjZWhvbGRlcktleSArICJcIj48ZGl2IGNsYXNzPVwiaW5uZXJcIj48L2Rpdj48L2Rpdj4iICsNCiAgICAgICAgICAgICAgICAiPC9kaXY+IiksIHJlbmRlcmluZ1Bvc2l0aW9uID0gJHNpYmxpbmcucG9zaXRpb24oKSwgb3V0ZXJIZWlnaHQgPSAkc2libGluZy5vdXRlckhlaWdodCgpOw0KICAgICAgICAgICAgaWYgKG91dGVySGVpZ2h0IDwgMjApIHsNCiAgICAgICAgICAgICAgICBvdXRlckhlaWdodCArPSA4Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGRpdi5jc3Moew0KICAgICAgICAgICAgICAgIHdpZHRoOiAkc2libGluZy5vdXRlcldpZHRoKCksDQogICAgICAgICAgICAgICAgInBvc2l0aW9uIjogImFic29sdXRlIiwNCiAgICAgICAgICAgICAgICB0b3A6IGJlZm9yZSA/IHJlbmRlcmluZ1Bvc2l0aW9uLnRvcCA6IChyZW5kZXJpbmdQb3NpdGlvbi50b3AgKyBvdXRlckhlaWdodCksDQogICAgICAgICAgICAgICAgbGVmdDogcmVuZGVyaW5nUG9zaXRpb24ubGVmdA0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBpZiAoIWJlZm9yZSkgew0KICAgICAgICAgICAgICAgICRkaXYuZmluZCgiLnpnLWRlbGlnaHRmdWwtZHJvcHBhYmxlLWltYWdlIikuYWRkQ2xhc3MoInJvdGF0ZWQiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuZHJvcFBsYWNlaG9sZGVyKGJlZm9yZSwgJGRpdiwgJHNpYmxpbmcpOw0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuZHJvcENvbXBvbmVudCA9IGZ1bmN0aW9uICh1aSwgJHBsaCkgew0KICAgICAgICAgICAgdmFyICRwbGgsIHBsaElkLCBjaHJvbWUsIGk7DQogICAgICAgICAgICBpZiAodGhpcy5pc1Rvb2xib3hEcm9wKSB7DQogICAgICAgICAgICAgICAgdGhpcy5pc1Rvb2xib3hEcm9wID0gZmFsc2U7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENocm9tZSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRwbGguYWRkQ2xhc3MoInRvb2xib3gtZHJvcHBpbmciKTsNCiAgICAgICAgICAgIHBsaElkID0gJHBsaC5hdHRyKCJzYy1wbGFjZWhvbGRlci1pZCIpOw0KICAgICAgICAgICAgaWYgKCRwbGgucHJldkFsbCgiY29kZSIpLmF0dHIoImlkIikgPT09IHBsaElkKSB7DQogICAgICAgICAgICAgICAgcGxoSWQgPSAkcGxoLnByZXZBbGwoImNvZGUiKS5hdHRyKCJrZXkiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmNocm9tZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICBjaHJvbWUgPSB0aGlzLmNocm9tZXNbaV07DQogICAgICAgICAgICAgICAgaWYgKGNocm9tZS5fb3JpZ2luYWxET01FbGVtZW50Lmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGNocm9tZS5fb3JpZ2luYWxET01FbGVtZW50WzBdLmF0dHJpYnV0ZXNbImtleSJdOw0KICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQgJiYga2V5ICE9PSBudWxsICYmIGtleS52YWx1ZSA9PT0gcGxoSWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENocm9tZSA9IGNocm9tZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkcGxoLmF0dHIoInBvc2l0aW9uIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUudHlwZS5faW5zZXJ0UG9zaXRpb24gPSAkcGxoLmF0dHIoInBvc2l0aW9uIik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWUudHlwZS5faW5zZXJ0UG9zaXRpb24gPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLlBhZ2VFZGl0b3IubGF5b3V0RGVmaW5pdGlvbkNvbnRyb2woKS52YWx1ZSA9IFNpdGVjb3JlLlBhZ2VNb2Rlcy5QYWdlRWRpdG9yLmxheW91dCgpLnZhbCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLlBhZ2VFZGl0b3IucG9zdFJlcXVlc3QoIndlYmVkaXQ6YWRkcmVuZGVyaW5nKHBsYWNlaG9sZGVyPSIgKyBwbGhJZCArICIsdG9vbGJveFJlbmRlcmluZz0iICsgdWkuZHJhZ2dhYmxlLmRhdGEoImlkIikgKyAiKSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUubW92ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChwbGFjZWhvbGRlcklkLCByZW5kZXJpbmcsIHBsYWNlaG9sZGVyKSB7DQogICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7DQogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHZhciBwbGFjZUhsZHIsIHBvc2l0aW9uLCBjb21wb25lbnQsIHRyZWUsIGRldmljZUlkLCBzaXRlY29yZUNocm9tZSwgcmVuZGVyaW5nVWlkOw0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IHJlbmRlcmluZy5kYXRhKCJjb21wb25lbnQiKTsNCiAgICAgICAgICAgICAgICAgICAgcGxhY2VIbGRyID0gc2VsZi5nZXRQbGFjZWhvbGRlckZyb21JZChwbGFjZWhvbGRlcklkKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlSGxkci5sZW5ndGggPCAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAiQ2Fubm90IGZpbmQgcGxhY2Vob2xkZXIiOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsYWNlSGxkci5sZW5ndGggPiAxKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiV2FybmluZyEgWW91IGhhdmUgdHdvIHBsYWNlaG9sZGVycyB3aXRoIHRoZSBzYW1lIHBhdGggb24gdGhlIHBhZ2UhIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwbGFjZWhvbGRlci5hdHRyKCJwb3NpdGlvbiIpIHx8IDA7DQogICAgICAgICAgICAgICAgICAgIGlmICghcmVuZGVyaW5nLmRhdGEoImlzUG9zaXRpb25DaGFuZ2VkIikoY29tcG9uZW50LCBwb3NpdGlvbiwgcGxhY2Vob2xkZXJJZCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB0cmVlID0gcmVuZGVyaW5nLmRhdGEoInRyZWUiKTsNCiAgICAgICAgICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLkRlc2lnbk1hbmFnZXIubW92ZUNvbnRyb2xUbyhjb21wb25lbnQsIHBsYWNlSGxkclswXSwgcG9zaXRpb24pOw0KICAgICAgICAgICAgICAgICAgICBzZWxmLm1vdmVDb21wb25lbnRUcmVlKGNvbXBvbmVudCwgdHJlZSk7DQogICAgICAgICAgICAgICAgICAgIHNlbGYucG9zdE1vdmVBY3Rpb25zKGNvbXBvbmVudCk7DQogICAgICAgICAgICAgICAgICAgIGRldmljZUlkID0gU2l0ZWNvcmUuTGF5b3V0RGVmaW5pdGlvbi5nZXREZXZpY2VJRCgpOw0KICAgICAgICAgICAgICAgICAgICBzaXRlY29yZUNocm9tZSA9IFNpdGVjb3JlLlBhZ2VNb2Rlcy5DaHJvbWVNYW5hZ2VyLnNlbGVjdGVkQ2hyb21lKCk7DQogICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ1VpZCA9IHNpdGVjb3JlQ2hyb21lLnR5cGUudW5pcXVlSWQoKTsNCiAgICAgICAgICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLlBhZ2VFZGl0b3IucG9zdFJlcXVlc3QoIndlYmVkaXQ6dXBkYXRlbGF5b3V0KGRldmljZUlkPSIgKyBkZXZpY2VJZCArICIscmVuZGVyaW5nVWlkPSIgKyByZW5kZXJpbmdVaWQgKyAiKSIsIG51bGwsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSgpOw0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUubW92ZUNvbXBvbmVudFRyZWUgPSBmdW5jdGlvbiAoY29tcG9uZW50LCB0cmVlKSB7DQogICAgICAgICAgICB2YXIgYywgY3VycmVudCwgbmV3Um9vdFBsYWNlaG9sZGVyLCBuZXdQbGFjZWhvbGRlciwgb2xkUGxhY2Vob2xkZXIsIGxheW91dERlZmluaXRpb24sIHByb2Nlc3NlZFBsYWNlaG9sZGVycyA9IHt9Ow0KICAgICAgICAgICAgdHJlZSA9IHRyZWUuYmZzOw0KICAgICAgICAgICAgaWYgKHRyZWUubGVuZ3RoID09PSAxKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgb2xkUGxhY2Vob2xkZXIgPSB0cmVlWzBdLnBsYWNlaG9sZGVyOw0KICAgICAgICAgICAgbmV3Um9vdFBsYWNlaG9sZGVyID0gdGhpcy5nZXRQbGFjZWhvbGRlckZ1bGxQYXRoKHRyZWVbMF0ubm9kZSk7DQogICAgICAgICAgICBsYXlvdXREZWZpbml0aW9uID0gU2l0ZWNvcmUuTGF5b3V0RGVmaW5pdGlvbi5nZXRMYXlvdXREZWZpbml0aW9uKCk7DQogICAgICAgICAgICBmb3IgKGMgPSAxOyBjIDwgdHJlZS5sZW5ndGg7IGMrKykgew0KICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0cmVlW2NdOw0KICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Lm5vZGUudHlwZS5rZXkoKSAhPT0gInJlbmRlcmluZyIpIHsNCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIG5ld1BsYWNlaG9sZGVyID0gY3VycmVudC5wbGFjZWhvbGRlci5yZXBsYWNlKG9sZFBsYWNlaG9sZGVyLCBuZXdSb290UGxhY2Vob2xkZXIpOw0KICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTGF5b3V0RGVmaW5pdGlvbihjdXJyZW50Lm5vZGUsIG5ld1BsYWNlaG9sZGVyLCBsYXlvdXREZWZpbml0aW9uKTsNCiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBsYWNlaG9sZGVyKHRoaXMuZ2V0UGxhY2Vob2xkZXJGdWxsUGF0aChjdXJyZW50Lm5vZGUpLCBuZXdQbGFjZWhvbGRlciwgcHJvY2Vzc2VkUGxhY2Vob2xkZXJzKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFNpdGVjb3JlLkxheW91dERlZmluaXRpb24uc2V0TGF5b3V0RGVmaW5pdGlvbihsYXlvdXREZWZpbml0aW9uKTsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmdldENvbXBvbmVudFRyZWUgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7DQogICAgICAgICAgICB2YXIgcXVldWUgPSBbXSwgcm9vdCwgY3VycmVudCwgYywgcGgsIGNoaWxkcmVuLCBwbGFjZWhvbGRlcnNCZWxvd1Jvb3QgPSBbXSwgbm9kZSwgYmZzID0gW10sIGlzQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIChub2RlLnR5cGUua2V5KCkgPT09ICJyZW5kZXJpbmciKTsgfSwgaXNQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiAobm9kZS50eXBlLmtleSgpID09PSAicGxhY2Vob2xkZXIiKTsgfSwgZ2V0RnVsbFBsYWNlaG9sZGVyUGF0aCA9IGZ1bmN0aW9uIChwYXJlbnQsIGN1cnJlbnQpIHsNCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC50eXBlLmdldFBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5wbGFjZWhvbGRlciArICIvIiArIGN1cnJlbnQudHlwZS5nZXRQbGFjZWhvbGRlcigpLmRpc3BsYXlOYW1lKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50LnBsYWNlaG9sZGVyOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIGdldFBvc2l0aW9uSW5QbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChjdXJyZW50KSB7DQogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQudHlwZS5nZXRQbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBTaXRlY29yZS5MYXlvdXREZWZpbml0aW9uLmdldFJlbmRlcmluZ1Bvc2l0aW9uSW5QbGFjZWhvbGRlcihjdXJyZW50LnR5cGUuZ2V0UGxhY2Vob2xkZXIoKS5kaXNwbGF5TmFtZSgpLCBjdXJyZW50LnR5cGUudW5pcXVlSWQoKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiAtMTsNCiAgICAgICAgICAgIH07DQogICAgICAgICAgICByb290ID0geyBwYXJlbnQ6IG51bGwsIG5vZGU6IGNvbXBvbmVudCwgcGxhY2Vob2xkZXI6IGNvbXBvbmVudC50eXBlLmdldFBsYWNlaG9sZGVyKCkub3BlbmluZ01hcmtlcigpLmF0dHIoImtleSIpLCBwb3NpdGlvbjogMCB9Ow0KICAgICAgICAgICAgcXVldWUucHVzaChyb290KTsNCiAgICAgICAgICAgIGJmcy5wdXNoKHJvb3QpOw0KICAgICAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcXVldWUuc2hpZnQoKTsNCiAgICAgICAgICAgICAgICBjdXJyZW50LmNoaWxkcmVuID0gW107DQogICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjdXJyZW50Lm5vZGUuZ2V0Q2hpbGRDaHJvbWVzKCk7DQogICAgICAgICAgICAgICAgZm9yIChjID0gMDsgYyA8IGNoaWxkcmVuLmxlbmd0aDsgYysrKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbltjXSAhPT0gY3VycmVudC5ub2RlICYmIGlzQ29tcG9uZW50KGNoaWxkcmVuW2NdKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN1cnJlbnQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogY2hpbGRyZW5bY10sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGdldEZ1bGxQbGFjZWhvbGRlclBhdGgoY3VycmVudCwgY2hpbGRyZW5bY10pLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBnZXRQb3NpdGlvbkluUGxhY2Vob2xkZXIoY2hpbGRyZW5bY10pDQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJmcy5wdXNoKG5vZGUpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzUGxhY2Vob2xkZXIoY2hpbGRyZW5bY10pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwaCA9IChjdXJyZW50LnBsYWNlaG9sZGVyKVswXSA9PT0gIi8iID8gY3VycmVudC5wbGFjZWhvbGRlciA6ICIvIiArIGN1cnJlbnQucGxhY2Vob2xkZXI7DQogICAgICAgICAgICAgICAgICAgICAgICBwaCArPSAiLyIgKyBjaGlsZHJlbltjXS5kaXNwbGF5TmFtZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJzQmVsb3dSb290LnB1c2gocGgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG5vZGU6IGNoaWxkcmVuW2NdLCBwbGFjZWhvbGRlcjogY3VycmVudC5wbGFjZWhvbGRlciB9KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJvb3QuYmZzID0gYmZzOw0KICAgICAgICAgICAgcm9vdC5kZXNjZW5kYW50UGxhY2Vob2xkZXJzID0gcGxhY2Vob2xkZXJzQmVsb3dSb290Ow0KICAgICAgICAgICAgcmV0dXJuIHJvb3Q7DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS51cGRhdGVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChvbGRQbGFjZWhvbGRlciwgbmV3UGxhY2Vob2xkZXIsIHByb2Nlc3NlZFBsYWNlaG9sZGVycykgew0KICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyOw0KICAgICAgICAgICAgaWYgKCFwcm9jZXNzZWRQbGFjZWhvbGRlcnMuaGFzT3duUHJvcGVydHkob2xkUGxhY2Vob2xkZXIpKSB7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSB0aGlzLiQodGhpcy5nZXRQbGFjZWhvbGRlckZyb21JZChvbGRQbGFjZWhvbGRlcilbMF0ub3BlbmluZ01hcmtlcigpKTsNCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5hdHRyKCJrZXkiLCBuZXdQbGFjZWhvbGRlcik7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuYXR0cigiaWQiLCBuZXdQbGFjZWhvbGRlci5yZXBsYWNlKC9cLy9nLCAiXyIpLnJlcGxhY2UoLy0vZywgIl8iKSk7DQogICAgICAgICAgICAgICAgcHJvY2Vzc2VkUGxhY2Vob2xkZXJzW29sZFBsYWNlaG9sZGVyXSA9IG5ld1BsYWNlaG9sZGVyOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUudXBkYXRlTGF5b3V0RGVmaW5pdGlvbiA9IGZ1bmN0aW9uIChjb21wb25lbnQsIG5ld1BsYWNlaG9sZGVyLCBsYXlvdXREZWZpbml0aW9uKSB7DQogICAgICAgICAgICB2YXIgdWlkID0gY29tcG9uZW50LnR5cGUudW5pcXVlSWQoKSwgcmVuZGVyaW5nOw0KICAgICAgICAgICAgcmVuZGVyaW5nID0gdGhpcy4kLmdyZXAobGF5b3V0RGVmaW5pdGlvbi5yLmRbMF0uciwgZnVuY3Rpb24gKGVsZW1lbnQsIGlkeCkgeyByZXR1cm4gKFNpdGVjb3JlLkxheW91dERlZmluaXRpb24uZ2V0U2hvcnRJRChlbGVtZW50WyJAdWlkIl0pID09PSB1aWQpOyB9KTsNCiAgICAgICAgICAgIGlmIChyZW5kZXJpbmcubGVuZ3RoID09PSAxKSB7DQogICAgICAgICAgICAgICAgcmVuZGVyaW5nID0gcmVuZGVyaW5nWzBdOw0KICAgICAgICAgICAgICAgIHJlbmRlcmluZ1siQHBoIl0gPSBuZXdQbGFjZWhvbGRlcjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmRyb3BQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChiZWZvcmUsICRkaXYsICRzaWJsaW5nKSB7DQogICAgICAgICAgICBpZiAoJGRpdi53aWR0aCgpID09PSAwICYmICRzaWJsaW5nLnBhcmVudCgpLmlzKCJzcGFuIikpIHsNCiAgICAgICAgICAgICAgICAkZGl2LndpZHRoKCIxMDAlIik7DQogICAgICAgICAgICAgICAgJGRpdi5oZWlnaHQoMjApOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGRpdi5jc3MoInZpc2liaWxpdHkiLCAiaGlkZGVuIik7DQogICAgICAgICAgICBpZiAoYmVmb3JlKSB7DQogICAgICAgICAgICAgICAgJHNpYmxpbmcuYmVmb3JlKCRkaXYpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgJHNpYmxpbmcuYWZ0ZXIoJGRpdik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLmRyb3BwYWJsZVBsYWNlaG9sZGVycy5wdXNoKCRkaXYpOw0KICAgICAgICAgICAgdGhpcy5tb3VzZU1hbmFnZXIudHJhY2tEcm9wUGxhY2UoJGRpdi5maW5kKCIuemctZGVsaWdodGZ1bC1kcm9wcGFibGUtaW1hZ2UiKSk7DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS5ub3RpZnlEcm9wUGxhY2UgPSBmdW5jdGlvbiAoaXNWaXNpYmxlLCBwbGFjZWhvbGRlcikgew0KICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyVGV4dCwgcGxhY2Vob2xkZXIsIHBvc2l0aW9uLCBvbGQsICR3cmFwcGVyID0gdGhpcy4kKCIjd3JhcHBlciIpLCBub3RpZnlCb3gsIG5vdGlmeUljb24sIG5vdGlmeVRleHQ7DQogICAgICAgICAgICBwbGFjZWhvbGRlclRleHQgPSBwbGFjZWhvbGRlci5hdHRyKCJrZXkiKTsNCiAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlci5hdHRyKCJwb3NpdGlvbiIpKSB7DQogICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwYXJzZUludChwbGFjZWhvbGRlci5hdHRyKCJwb3NpdGlvbiIpKSArIDE7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJUZXh0ICs9ICIgKCIgKyBwb3NpdGlvbiArICIpIjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG9sZCA9ICR3cmFwcGVyLmZpbmQoIi5ub3RpZnktYm94Iik7DQogICAgICAgICAgICBvbGQucmVtb3ZlKCk7DQogICAgICAgICAgICBub3RpZnlCb3ggPSB0aGlzLiQoIjxkaXYgLz4iKTsNCiAgICAgICAgICAgIG5vdGlmeUljb24gPSB0aGlzLiQoIjxzcGFuIC8+IikuYWRkQ2xhc3MoIm5vdGlmeS1pY29uIik7DQogICAgICAgICAgICBub3RpZnlUZXh0ID0gdGhpcy4kKCI8c3BhbiAvPiIpLmFkZENsYXNzKCJub3RpZnktdGV4dCIpOw0KICAgICAgICAgICAgbm90aWZ5Qm94LmFkZENsYXNzKCJub3RpZnktYm94Iik7DQogICAgICAgICAgICBpZiAodGhpcy4kKCIudG91Y2gtdmVyc2lvbiIpLmxlbmd0aCAhPT0gMCkgew0KICAgICAgICAgICAgICAgIG5vdGlmeUJveC5hZGRDbGFzcygidG91Y2gtdmVyc2lvbiIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCEkd3JhcHBlci5maW5kKCIubm90aWZ5LWJveCIpLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgICR3cmFwcGVyLnByZXBlbmQobm90aWZ5Qm94KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghaXNWaXNpYmxlKSB7DQogICAgICAgICAgICAgICAgbm90aWZ5Qm94LmFkZENsYXNzKCJ2aXNpYmxlIik7DQogICAgICAgICAgICAgICAgbm90aWZ5Qm94LmFwcGVuZChub3RpZnlJY29uKS5hcHBlbmQobm90aWZ5VGV4dCk7DQogICAgICAgICAgICAgICAgbm90aWZ5VGV4dC50ZXh0KHBsYWNlaG9sZGVyVGV4dCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICBub3RpZnlCb3gucmVtb3ZlQ2xhc3MoInZpc2libGUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMudXBkYXRlTm90aWZ5Qm94UG9zaXRpb24obm90aWZ5Qm94LCBwbGFjZWhvbGRlcik7DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS51cGRhdGVOb3RpZnlCb3hQb3NpdGlvbiA9IGZ1bmN0aW9uIChub3RpZnlCb3gsIHBsYWNlaG9sZGVyKSB7DQogICAgICAgICAgICB2YXIgaW1hZ2UgPSBwbGFjZWhvbGRlci5wYXJlbnQoKS5maW5kKCIuemctZGVsaWdodGZ1bC1kcm9wcGFibGUtaW1hZ2UiKSwgbm90aWZ5Qm94UmVjdCwgcGxhY2Vob2xkZXJSZWN0LCBrZXk7DQogICAgICAgICAgICBpZiAoaW1hZ2UubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgIGtleSA9IGltYWdlLmF0dHIoImtleSIpICsgIiMiICsgaW1hZ2UuYXR0cigicG9zaXRpb24iKTsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy5ub3RpZnlQbGFjZWhvbGRlcnNQb3NpdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkgew0KICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlclJlY3QgPSB0aGlzLm5vdGlmeVBsYWNlaG9sZGVyc1Bvc2l0aW9uc1trZXldOw0KICAgICAgICAgICAgICAgICAgICBub3RpZnlCb3hSZWN0ID0gdGhpcy5ub3RpZnlCb3hQb3NpdGlvbnNba2V5XTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyUmVjdCA9IGltYWdlWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOw0KICAgICAgICAgICAgICAgICAgICBub3RpZnlCb3hSZWN0ID0gbm90aWZ5Qm94WzBdLmdldENsaWVudFJlY3RzKClbMF07DQogICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5UGxhY2Vob2xkZXJzUG9zaXRpb25zW2tleV0gPSBwbGFjZWhvbGRlclJlY3Q7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5Qm94UG9zaXRpb25zW2tleV0gPSBub3RpZnlCb3hSZWN0Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBub3RpZnlCb3guY3NzKCJsZWZ0IiwgKHBsYWNlaG9sZGVyUmVjdC5sZWZ0IC0gbm90aWZ5Qm94UmVjdC53aWR0aCAvIDIpICsgInB4Iik7DQogICAgICAgICAgICAgICAgbm90aWZ5Qm94LmNzcygidG9wIiwgKHBsYWNlaG9sZGVyUmVjdC50b3AgLSBub3RpZnlCb3guaGVpZ2h0KCkgKiAzKSArICJweCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJSZWN0ID0gcGxhY2Vob2xkZXJbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQogICAgICAgICAgICAgICAgbm90aWZ5Qm94LmNzcygibGVmdCIsIHBsYWNlaG9sZGVyUmVjdC5sZWZ0IC0gMTAgKyAicHgiKTsNCiAgICAgICAgICAgICAgICBub3RpZnlCb3guY3NzKCJ0b3AiLCBwbGFjZWhvbGRlclJlY3QudG9wIC0gMTAgKyAicHgiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLnNob3VsZENyZWF0ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKHJlbmRlcmluZywgJG9wZW5Db2RlKSB7DQogICAgICAgICAgICB2YXIga2V5ID0gJG9wZW5Db2RlLmF0dHIoImtleSIpLCBjaHJvbWVLZXksIGNocm9tZSwgaTsNCiAgICAgICAgICAgIGlmICgkb3BlbkNvZGUuc2libGluZ3MoIi5zY0VtcHR5UGxhY2Vob2xkZXJbc2MtcGxhY2Vob2xkZXItaWQ9XCIiICsgJG9wZW5Db2RlLmF0dHIoImlkIikgKyAiXCJdIikubGVuZ3RoICE9PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHRoaXMuJC5pbkFycmF5KHJlbmRlcmluZy5kYXRhKCJpZCIpLCB0aGlzLnBsYWNlaG9sZGVyc1trZXldKSA9PT0gLTEpIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5jaHJvbWVzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgY2hyb21lID0gdGhpcy5jaHJvbWVzW2ldOw0KICAgICAgICAgICAgICAgIGlmIChjaHJvbWUuX29yaWdpbmFsRE9NRWxlbWVudC5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIGNocm9tZUtleSA9IGNocm9tZS5fb3JpZ2luYWxET01FbGVtZW50WzBdLmF0dHJpYnV0ZXNbImtleSJdOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hyb21lS2V5ICE9PSB1bmRlZmluZWQgJiYgY2hyb21lS2V5ICE9PSBudWxsICYmIGNocm9tZUtleS52YWx1ZSA9PT0ga2V5ICYmIGNocm9tZS5kYXRhICE9PSB1bmRlZmluZWQgJiYgY2hyb21lLmRhdGEuY3VzdG9tICE9PSB1bmRlZmluZWQgJiYgY2hyb21lLmRhdGEuY3VzdG9tLmVkaXRhYmxlID09PSAiZmFsc2UiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmdldFBsYWNlaG9sZGVyc1JlbmRlcmluZ3MgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KICAgICAgICAgICAgcmV0dXJuIFNpdGVjb3JlLlBhZ2VNb2Rlcy5EZXNpZ25NYW5hZ2VyLnBsYWNlaG9sZGVycygpLm1hcChmdW5jdGlvbiAocGgpIHsNCiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyaW5ncyA9IFtdLCBpOw0KICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwaC5lbGVtZW50Lmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy4kKHBoLmVsZW1lbnRbaV0pLmlzKCIuY29tcG9uZW50LC5qc29uLWNvbXBvbmVudC13cmFwcGVyIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ3MucHVzaChwaC5lbGVtZW50W2ldKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiBwaC50eXBlLnBsYWNlaG9sZGVyS2V5KCksDQogICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ3M6IHJlbmRlcmluZ3MNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfSk7DQogICAgICAgIH07DQogICAgICAgIFN4YU1vdmVyLnByb3RvdHlwZS5wb3N0TW92ZUFjdGlvbnMgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnRJRCA9IGNvbXBvbmVudC5vcGVuaW5nTWFya2VyKCkuYXR0cigiaWQiKTsNCiAgICAgICAgICAgICAgICBTaXRlY29yZS5QYWdlTW9kZXMuUGFnZUVkaXRvci5sYXlvdXREZWZpbml0aW9uQ29udHJvbCgpLnZhbHVlID0gU2l0ZWNvcmUuUGFnZU1vZGVzLlBhZ2VFZGl0b3IubGF5b3V0KCkudmFsKCk7DQogICAgICAgICAgICAgICAgU2l0ZWNvcmUuUGFnZU1vZGVzLkNocm9tZU1hbmFnZXIuaGFuZGxlTWVzc2FnZSgiY2hyb21lOnJlbmRlcmluZzpwcm9wZXJ0aWVzY29tcGxldGVkIiwgeyBjb250cm9sSWQ6IGNvbXBvbmVudElEIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgU3hhTW92ZXIucHJvdG90eXBlLmdldFBsYWNlaG9sZGVyRnVsbFBhdGggPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7DQogICAgICAgICAgICB2YXIgcGggPSBTaXRlY29yZS5MYXlvdXREZWZpbml0aW9uLmdldFJlbmRlcmluZyhjb21wb25lbnQudHlwZS51bmlxdWVJZCgpKVsiQHBoIl07DQogICAgICAgICAgICBpZiAocGguaW5kZXhPZigiLyIpID09PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHBoOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICIvIiArIHBoOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBTeGFNb3Zlci5wcm90b3R5cGUuZ2V0UGxhY2Vob2xkZXJGcm9tSWQgPSBmdW5jdGlvbiAocGhJZCkgew0KICAgICAgICAgICAgcmV0dXJuIFNpdGVjb3JlLlBhZ2VNb2Rlcy5EZXNpZ25NYW5hZ2VyLnBsYWNlaG9sZGVycygpLmZpbHRlcihmdW5jdGlvbiAocCkgeyByZXR1cm4gKHAub3BlbmluZ01hcmtlcigpWzBdLmlkID09PSBwaElkLnJlcGxhY2UoL1wvL2csICJfIikucmVwbGFjZSgvLS9nLCAiXyIpKTsgfSk7DQogICAgICAgIH07DQogICAgICAgIHJldHVybiBTeGFNb3ZlcjsNCiAgICB9KCkpOw0KICAgIFNYQS5TeGFNb3ZlciA9IFN4YU1vdmVyOw0KICAgIHZhciBNb3VzZU1hbmFnZXIgPSAoZnVuY3Rpb24gKCkgew0KICAgICAgICBmdW5jdGlvbiBNb3VzZU1hbmFnZXIoKSB7DQogICAgICAgICAgICB0aGlzLmRyb3BQbGFjZXMgPSBbXTsNCiAgICAgICAgICAgIHRoaXMuZHJvcFBsYWNlc1Bvc2l0aW9ucyA9IHt9Ow0KICAgICAgICAgICAgdGhpcy50b2xsZXJhbmNlWCA9IDEwOw0KICAgICAgICAgICAgdGhpcy50b2xsZXJhbmNlWSA9IDUwOw0KICAgICAgICAgICAgdGhpcy5yZWZyZXNoVGltZSA9IDU7DQogICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7DQogICAgICAgICAgICB0aGlzLnByb2Nlc3NlZFBsYWNlaG9sZGVySWNvbnMgPSBbXTsNCiAgICAgICAgICAgIHRoaXMudXNlTGluZVByb3hpbWl0eSA9IHRydWU7DQogICAgICAgICAgICB0aGlzLiQgPSBqUXVlcnk7DQogICAgICAgICAgICB0aGlzLmluaXQoKTsNCiAgICAgICAgfQ0KICAgICAgICBNb3VzZU1hbmFnZXIucHJvdG90eXBlLnRyYWNrRHJvcFBsYWNlID0gZnVuY3Rpb24gKGRyb3BQbGFjZSkgew0KICAgICAgICAgICAgdmFyIGtleSA9IGRyb3BQbGFjZS5hdHRyKCJrZXkiKSArICIjIiArIGRyb3BQbGFjZS5hdHRyKCJwb3NpdGlvbiIpLCBzY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wLCByZWN0Ow0KICAgICAgICAgICAgaWYgKHRoaXMudXNlTGluZVByb3hpbWl0eSkgew0KICAgICAgICAgICAgICAgIGRyb3BQbGFjZSA9IGRyb3BQbGFjZS5uZXh0KCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICB0aGlzLnRvbGxlcmFuY2VYID0gMTAwOw0KICAgICAgICAgICAgICAgIHRoaXMudG9sbGVyYW5jZVkgPSAxMDA7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAodGhpcy5kcm9wUGxhY2VzUG9zaXRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHsNCiAgICAgICAgICAgICAgICByZWN0ID0gdGhpcy5kcm9wUGxhY2VzUG9zaXRpb25zW2tleV07DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICByZWN0ID0gZHJvcFBsYWNlWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOw0KICAgICAgICAgICAgICAgIHRoaXMuZHJvcFBsYWNlc1Bvc2l0aW9uc1trZXldID0gcmVjdDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHRoaXMuaW5pdCgpOw0KICAgICAgICAgICAgdGhpcy5kcm9wUGxhY2VzLnB1c2goew0KICAgICAgICAgICAgICAgICJkcm9wUGxhY2UiOiBkcm9wUGxhY2UsDQogICAgICAgICAgICAgICAgInRvcCI6IHJlY3QudG9wICsgc2Nyb2xsVG9wIC0gdGhpcy50b2xsZXJhbmNlWSwNCiAgICAgICAgICAgICAgICAiYm90dG9tIjogcmVjdC5ib3R0b20gKyBzY3JvbGxUb3AgKyB0aGlzLnRvbGxlcmFuY2VZLA0KICAgICAgICAgICAgICAgICJsZWZ0IjogcmVjdC5sZWZ0IC0gdGhpcy50b2xsZXJhbmNlWCwNCiAgICAgICAgICAgICAgICAicmlnaHQiOiByZWN0LnJpZ2h0ICsgdGhpcy50b2xsZXJhbmNlWA0KICAgICAgICAgICAgfSk7DQogICAgICAgIH07DQogICAgICAgIE1vdXNlTWFuYWdlci5wcm90b3R5cGUuc3RvcFRyYWNraW5nID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdGhpcy5kcm9wUGxhY2VzID0gW107DQogICAgICAgICAgICB0aGlzLiQoZG9jdW1lbnQpLnVuYmluZCgibW91c2Vtb3ZlIik7DQogICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7DQogICAgICAgICAgICB0aGlzLnByb2Nlc3NlZFBsYWNlaG9sZGVySWNvbnMgPSBbXTsNCiAgICAgICAgICAgIHRoaXMuZHJvcFBsYWNlc1Bvc2l0aW9ucyA9IHt9Ow0KICAgICAgICB9Ow0KICAgICAgICBNb3VzZU1hbmFnZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KICAgICAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7DQogICAgICAgICAgICAgICAgdGhpcy4kKGRvY3VtZW50KS5tb3VzZW1vdmUoZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy50aW1lcikgew0KICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVyKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBfdGhpcy50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJhY2tNb3VzZVBvc2l0aW9uKGV2ZW50KTsNCiAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMucmVmcmVzaFRpbWUpOw0KICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbml0aWFsaXplZCA9IHRydWU7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgdGhpcy4kKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZHJvcFBsYWNlc1Bvc2l0aW9ucyA9IHt9Ow0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBNb3VzZU1hbmFnZXIucHJvdG90eXBlLnRyYWNrTW91c2VQb3NpdGlvbiA9IGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgdmFyIGRyb3BQbGFjZURhdGEsIHNob3dFbGVtZW50cyA9IFtdLCBuZXh0VG9Ecm9wUGxhY2UsIGxlbmd0aCA9IHRoaXMuZHJvcFBsYWNlcy5sZW5ndGgsIGk7DQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICBkcm9wUGxhY2VEYXRhID0gdGhpcy5kcm9wUGxhY2VzW2ldOw0KICAgICAgICAgICAgICAgIG5leHRUb0Ryb3BQbGFjZSA9IHRoaXMudXNlTGluZVByb3hpbWl0eSA/IGRyb3BQbGFjZURhdGEuZHJvcFBsYWNlLnByZXYoKSA6IGRyb3BQbGFjZURhdGEuZHJvcFBsYWNlLm5leHQoKTsNCiAgICAgICAgICAgICAgICBpZiAoZXZlbnQucGFnZVkgPCBkcm9wUGxhY2VEYXRhLmJvdHRvbSAmJiBldmVudC5wYWdlWSA+IGRyb3BQbGFjZURhdGEudG9wICYmIGV2ZW50LnBhZ2VYID4gZHJvcFBsYWNlRGF0YS5sZWZ0ICYmIGV2ZW50LnBhZ2VYIDwgZHJvcFBsYWNlRGF0YS5yaWdodCkgew0KICAgICAgICAgICAgICAgICAgICBkcm9wUGxhY2VEYXRhLmRyb3BQbGFjZS5jc3MoInZpc2liaWxpdHkiLCAidmlzaWJsZSIpOw0KICAgICAgICAgICAgICAgICAgICBuZXh0VG9Ecm9wUGxhY2UuY3NzKCJ2aXNpYmlsaXR5IiwgInZpc2libGUiKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXNlTGluZVByb3hpbWl0eSAmJiBuZXh0VG9Ecm9wUGxhY2UubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0VsZW1lbnRzLnB1c2gobmV4dFRvRHJvcFBsYWNlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFbGVtZW50cy5wdXNoKGRyb3BQbGFjZURhdGEuZHJvcFBsYWNlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIGlmIChkcm9wUGxhY2VEYXRhLmRyb3BQbGFjZS5jc3MoInZpc2liaWxpdHkiKSA9PT0gInZpc2libGUiKSB7DQogICAgICAgICAgICAgICAgICAgIGRyb3BQbGFjZURhdGEuZHJvcFBsYWNlLmNzcygidmlzaWJpbGl0eSIsICJoaWRkZW4iKTsNCiAgICAgICAgICAgICAgICAgICAgbmV4dFRvRHJvcFBsYWNlLmNzcygidmlzaWJpbGl0eSIsICJoaWRkZW4iKTsNCiAgICAgICAgICAgICAgICAgICAgc2hvd0VsZW1lbnRzID0gc2hvd0VsZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoZHJvcFBsYWNlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHJvcFBsYWNlLmF0dHIoImtleSIpID09PSAodGhpcy51c2VMaW5lUHJveGltaXR5ID8gZHJvcFBsYWNlRGF0YS5kcm9wUGxhY2UucHJldigpLmF0dHIoImtleSIpIDogZHJvcFBsYWNlRGF0YS5kcm9wUGxhY2UuYXR0cigia2V5IikpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICB0aGlzLm1vdmVEcm9wUGxhY2VzKHNob3dFbGVtZW50cyk7DQogICAgICAgIH07DQogICAgICAgIE1vdXNlTWFuYWdlci5wcm90b3R5cGUuY29sbGlkZSA9IGZ1bmN0aW9uIChncm91cEVsZW1lbnRzLCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgaSwgZWxlbWVudFRvQ2hlY2s7DQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBFbGVtZW50cy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgIGVsZW1lbnRUb0NoZWNrID0gZ3JvdXBFbGVtZW50c1tpXTsNCiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFRvQ2hlY2suaGFzQ2xhc3MoInBvc2l0aW9uLXVwZGF0ZWQiKSB8fCAoZWxlbWVudFRvQ2hlY2suYXR0cigia2V5IikgPT09IGVsZW1lbnQuYXR0cigia2V5IikgJiYgZWxlbWVudFRvQ2hlY2suYXR0cigicG9zaXRpb24iKSA9PT0gZWxlbWVudC5hdHRyKCJwb3NpdGlvbiIpKSkgew0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKHRoaXMueUluc3RlcnNlY3Rpb24oZWxlbWVudFRvQ2hlY2ssIGVsZW1lbnQpICYmIHRoaXMueEluc3RlcnNlY3Rpb24oZWxlbWVudFRvQ2hlY2ssIGVsZW1lbnQpKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfTsNCiAgICAgICAgTW91c2VNYW5hZ2VyLnByb3RvdHlwZS5maW5kU21hbGxlc3RZID0gZnVuY3Rpb24gKGRpdjAsIGRpdjEpIHsNCiAgICAgICAgICAgIHJldHVybiAoZGl2MC5vZmZzZXQoKS50b3AgPCBkaXYxLm9mZnNldCgpLnRvcCkgPyBkaXYwIDogZGl2MTsNCiAgICAgICAgfTsNCiAgICAgICAgTW91c2VNYW5hZ2VyLnByb3RvdHlwZS55SW5zdGVyc2VjdGlvbiA9IGZ1bmN0aW9uIChkaXYwLCBkaXYxKSB7DQogICAgICAgICAgICB2YXIgZGl2WTAgPSB0aGlzLmZpbmRTbWFsbGVzdFkoZGl2MCwgZGl2MSksIGRpdlkxID0gKGRpdjAgIT09IGRpdlkwKSA/IGRpdjAgOiBkaXYxOw0KICAgICAgICAgICAgcmV0dXJuIChkaXZZMC5vZmZzZXQoKS50b3AgKyBkaXZZMC5oZWlnaHQoKSkgLSBkaXZZMS5vZmZzZXQoKS50b3AgPiAwOw0KICAgICAgICB9Ow0KICAgICAgICBNb3VzZU1hbmFnZXIucHJvdG90eXBlLmZpbmRTbWFsbGVzdFggPSBmdW5jdGlvbiAoZGl2MCwgZGl2MSkgew0KICAgICAgICAgICAgcmV0dXJuIChkaXYwLm9mZnNldCgpLmxlZnQgPCBkaXYxLm9mZnNldCgpLmxlZnQpID8gZGl2MCA6IGRpdjE7DQogICAgICAgIH07DQogICAgICAgIE1vdXNlTWFuYWdlci5wcm90b3R5cGUueEluc3RlcnNlY3Rpb24gPSBmdW5jdGlvbiAoZGl2MCwgZGl2MSkgew0KICAgICAgICAgICAgdmFyIGRpdlgwID0gdGhpcy5maW5kU21hbGxlc3RYKGRpdjAsIGRpdjEpLCBkaXZYMSA9IChkaXYwICE9PSBkaXZYMCkgPyBkaXYwIDogZGl2MTsNCiAgICAgICAgICAgIHJldHVybiAoZGl2WDAub2Zmc2V0KCkubGVmdCArIGRpdlgwLndpZHRoKCkpIC0gZGl2WDEub2Zmc2V0KCkubGVmdCA+IDA7DQogICAgICAgIH07DQogICAgICAgIE1vdXNlTWFuYWdlci5wcm90b3R5cGUubW92ZURyb3BQbGFjZXMgPSBmdW5jdGlvbiAoc2hvd0VsZW1lbnRzKSB7DQogICAgICAgICAgICB2YXIgaSwga2V5LCBwbGFjZWhvbGRlcktleSwgZ3JvdXBzID0ge30sIGdyb3VwRWxlbWVudHMsIGdyb3VwRWxlbWVudCwgcG9zaXRpb24sIHBvc2l0aW9ucywgc2hvd0VsZW1lbnQ7DQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2hvd0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgc2hvd0VsZW1lbnQgPSBzaG93RWxlbWVudHNbaV07DQogICAgICAgICAgICAgICAga2V5ID0gdGhpcy5ub3JtYWxpemVLZXkoc2hvd0VsZW1lbnQuYXR0cigia2V5IikpOw0KICAgICAgICAgICAgICAgIGlmIChncm91cHMuaGFzT3duUHJvcGVydHkoa2V5KSkgew0KICAgICAgICAgICAgICAgICAgICBncm91cHNba2V5XS5wdXNoKHNob3dFbGVtZW50KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGdyb3Vwc1trZXldID0gW3Nob3dFbGVtZW50XTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoc2hvd0VsZW1lbnRzLmxlbmd0aCA+IDEpIHsNCiAgICAgICAgICAgICAgICBmb3IgKHBsYWNlaG9sZGVyS2V5IGluIGdyb3Vwcykgew0KICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzLmhhc093blByb3BlcnR5KHBsYWNlaG9sZGVyS2V5KSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50cyA9IGdyb3Vwc1twbGFjZWhvbGRlcktleV07DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9ucyA9IFtdOw0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGdyb3VwRWxlbWVudHMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEVsZW1lbnQgPSBncm91cEVsZW1lbnRzW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZ3JvdXBFbGVtZW50Lmhhc0NsYXNzKCJwb3NpdGlvbi11cGRhdGVkIikgJiYgdGhpcy5jb2xsaWRlKGdyb3VwRWxlbWVudHMsIGdyb3VwRWxlbWVudCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBhcnNlSW50KGdyb3VwRWxlbWVudHNbMF0uY3NzKCJsZWZ0IikpIC0gMzU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvc2l0aW9ucy5pbmRleE9mKHRoaXMucG9zaXRpb24pICE9PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb25zW3RoaXMucG9zaXRpb25zLmxlbmd0aCAtIDFdIC0gMzU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50LmNzcygibGVmdCIsIHRoaXMucG9zaXRpb24pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEVsZW1lbnQuYWRkQ2xhc3MoInBvc2l0aW9uLXVwZGF0ZWQiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnMucHVzaCh0aGlzLnBvc2l0aW9uKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIE1vdXNlTWFuYWdlci5wcm90b3R5cGUubm9ybWFsaXplS2V5ID0gZnVuY3Rpb24gKGtleSkgew0KICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKCIvIikgPT09IDApIHsNCiAgICAgICAgICAgICAgICBrZXkgPSBrZXkuc3Vic3RyKDEsIGtleS5sZW5ndGgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKCIvIikgIT09IC0xKSB7DQogICAgICAgICAgICAgICAga2V5ID0ga2V5LnN1YnN0cigwLCBrZXkuaW5kZXhPZigiLyIpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBrZXk7DQogICAgICAgIH07DQogICAgICAgIHJldHVybiBNb3VzZU1hbmFnZXI7DQogICAgfSgpKTsNCn0pKFNYQSB8fCAoU1hBID0ge30pKTsNCihmdW5jdGlvbiAoU1hBKSB7DQogICAgdmFyIEZlYXR1cmU7DQogICAgKGZ1bmN0aW9uIChGZWF0dXJlKSB7DQogICAgICAgIHZhciBDb21wb3NpdGVzOw0KICAgICAgICAoZnVuY3Rpb24gKENvbXBvc2l0ZXMpIHsNCiAgICAgICAgICAgIHZhciBDb21wb3NpdGVQbGFjZWhvbGRlclZhbGlkYXRvciA9IChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgZnVuY3Rpb24gQ29tcG9zaXRlUGxhY2Vob2xkZXJWYWxpZGF0b3IoKSB7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIENvbXBvc2l0ZVBsYWNlaG9sZGVyVmFsaWRhdG9yLnByb3RvdHlwZS5HZXRDb21wb3NpdGVJZCA9IGZ1bmN0aW9uIChwbGFjZWhvbGRlcikgew0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbiA9IG5ldyBQbGFjZWhvbGRlcihwbGFjZWhvbGRlcikuR2V0Q29tcG9zaXRlU2VjdGlvblBsYWNlaG9sZGVyKCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChzZWN0aW9uICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gc2VjdGlvbi5tYXRjaCgvKHNlY3Rpb24tW1x3XSstKVxkLVxkL2cpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkZW50aWZpZXJzID0gdGVtcFswXS5yZXBsYWNlKC9zZWN0aW9uLVtcd10rLS9nLCAiIikuc3BsaXQoJy0nKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkc0l0ZW1JbmRleCA9IGlkZW50aWZpZXJzWzBdOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR5bmFtaWNQaElEID0gaWRlbnRpZmllcnNbMV07DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcG9zaXRlUGxhY2Vob2xkZXJOYW1lID0gbmV3IFBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyKS5HZXRDb21wb3NpdGVQbGFjZWhvbGRlck5hbWUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wb3NpdGVQbGFjZWhvbGRlck5hbWUgKyAiLSIgKyBkc0l0ZW1JbmRleCArIGR5bmFtaWNQaElEOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIENvbXBvc2l0ZVBsYWNlaG9sZGVyVmFsaWRhdG9yLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChwaFgsIHBoWSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZUVkaXRvciA9IFNpdGVjb3JlLlBhZ2VNb2Rlcy5QYWdlRWRpdG9yOw0KICAgICAgICAgICAgICAgICAgICBpZiAocGFnZUVkaXRvciA9PSBudWxsIHx8IHBhZ2VFZGl0b3Iub25QYWdlRWRpdGluZ09mQ29tcG9zaXRlcyA9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuR2V0Q29tcG9zaXRlSWQocGhYKSA9PSB0aGlzLkdldENvbXBvc2l0ZUlkKHBoWSkpOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgcmV0dXJuIENvbXBvc2l0ZVBsYWNlaG9sZGVyVmFsaWRhdG9yOw0KICAgICAgICAgICAgfSgpKTsNCiAgICAgICAgICAgIENvbXBvc2l0ZXMuQ29tcG9zaXRlUGxhY2Vob2xkZXJWYWxpZGF0b3IgPSBDb21wb3NpdGVQbGFjZWhvbGRlclZhbGlkYXRvcjsNCiAgICAgICAgICAgIHZhciBQbGFjZWhvbGRlciA9IChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgZnVuY3Rpb24gUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5QYXJ0cyA9IHBsYWNlaG9sZGVyLnNwbGl0KCcvJyk7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuUGFydHMgPSB0aGlzLlBhcnRzLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gdiAhPT0gJyc7IH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBQbGFjZWhvbGRlci5wcm90b3R5cGUuR2V0TGFzdFBsYWNlaG9sZGVyTmFtZSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFydHMuc2xpY2UoLTEpWzBdOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgUGxhY2Vob2xkZXIucHJvdG90eXBlLkdldFBhcmVudFBsYWNlaG9sZGVyTmFtZSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCh0aGlzLlBhcnRzLmxlbmd0aCA+IDEpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5QYXJ0c1sodGhpcy5QYXJ0cy5sZW5ndGggLSAyKV07DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUGFydHNbMF07DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICBQbGFjZWhvbGRlci5wcm90b3R5cGUuR2V0UGFyZW50UGxhY2Vob2xkZXJQYXRoID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoKHRoaXMuUGFydHMubGVuZ3RoID4gMSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHRoaXMuUGFydHMuc2xpY2UoMCwgKHRoaXMuUGFydHMubGVuZ3RoIC0gMSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwYXJ0cy5sZW5ndGggPT0gMSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydHMuam9pbigiLyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIvIiArIHBhcnRzLmpvaW4oIi8iKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5QYXJ0c1swXTsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVyLnByb3RvdHlwZS5HZXRQbGFjZWhvbGRlclBhdGggPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy5QYXJ0cyAhPSBudWxsKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0aGlzLlBhcnRzLmxlbmd0aCA9PSAxKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlBhcnRzWzBdOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIvIiArIHRoaXMuUGFydHMuam9pbigiLyIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIFBsYWNlaG9sZGVyLnByb3RvdHlwZS5HZXRDb21wb3NpdGVTZWN0aW9uUGxhY2Vob2xkZXJOYW1lID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNJblNoYXBlVHlwZTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5QYXJ0cy5sZW5ndGggLSAxOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaW5kZXggPj0gMDsgaW5kZXgtLSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuUGFydHNbaW5kZXhdLm1hdGNoKC9zZWN0aW9uLVt0aXRsZXxjb250ZW50XSstXGQtXGQvZykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0luU2hhcGVUeXBlID0gdGhpcy5QYXJ0c1tpbmRleF07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzSW5TaGFwZVR5cGU7DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICBQbGFjZWhvbGRlci5wcm90b3R5cGUuR2V0Q29tcG9zaXRlU2VjdGlvblBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuR2V0Q29tcG9zaXRlU2VjdGlvblBsYWNlaG9sZGVyTmFtZSgpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoKHNlY3Rpb24gIT0gbnVsbCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuUGFydHMubGFzdEluZGV4T2Yoc2VjdGlvbik7DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgKGkgPCBpbmRleCk7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuUGFydHMuc2hpZnQoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkdldFBsYWNlaG9sZGVyUGF0aCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgUGxhY2Vob2xkZXIucHJvdG90eXBlLkdldENvbXBvc2l0ZVBsYWNlaG9sZGVyTmFtZSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG5lYXJlc3RDb21wb3NpdGVTZWN0aW9uUGxhY2Vob2xkZXIgPSB0aGlzLkdldENvbXBvc2l0ZVNlY3Rpb25QbGFjZWhvbGRlck5hbWUoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHNlY3Rpb25JbmRleCA9IHRoaXMuUGFydHMubGFzdEluZGV4T2YobmVhcmVzdENvbXBvc2l0ZVNlY3Rpb25QbGFjZWhvbGRlcik7DQogICAgICAgICAgICAgICAgICAgIGlmICgoc2VjdGlvbkluZGV4ID49IDEpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5QYXJ0c1soc2VjdGlvbkluZGV4IC0gMSldOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgcmV0dXJuIFBsYWNlaG9sZGVyOw0KICAgICAgICAgICAgfSgpKTsNCiAgICAgICAgICAgIENvbXBvc2l0ZXMuUGxhY2Vob2xkZXIgPSBQbGFjZWhvbGRlcjsNCiAgICAgICAgfSkoQ29tcG9zaXRlcyA9IEZlYXR1cmUuQ29tcG9zaXRlcyB8fCAoRmVhdHVyZS5Db21wb3NpdGVzID0ge30pKTsNCiAgICB9KShGZWF0dXJlID0gU1hBLkZlYXR1cmUgfHwgKFNYQS5GZWF0dXJlID0ge30pKTsNCn0pKFNYQSB8fCAoU1hBID0ge30pKTsNCg==
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 53863
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "ba3f86a2-4a1c-4d78-b63d-91c2779c1b5e"
  Hint: __Sortorder
  Value: 0
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20160509T085812Z
